package com.maelook.Utils;

import com.maelook.Bean.PrameterRef_vs;
import com.maelook.Bean.PrametersRef_cct;
import java.math.BigDecimal;
import java.util.ArrayList;

/**
 * Created by Andrew on 2016/11/15.
 */

public class spactrumToParameterUtil {

    private double[] illuminance = {3.9E-5, 4.28264E-5, 4.69146E-5, 5.15896E-5, 5.71764E-5, 6.4E-5, 7.23442E-5, 8.22122E-5, 9.35082E-5, 1.06136E-4, 1.2E-4, 1.34984E-4, 1.51492E-4, 1.70208E-4, 1.91816E-4, 2.17E-4, 2.46907E-4, 2.8124E-4, 3.1852E-4, 3.57267E-4, 3.96E-4, 4.33715E-4, 4.73024E-4, 5.17876E-4, 5.72219E-4, 6.4E-4, 7.2456E-4, 8.255E-4, 9.4116E-4, 0.00106988, 0.00121, 0.001362091, 0.001530752, 0.001720368, 0.001935323, 0.00218, 0.0024548, 0.002764, 0.0031178, 0.0035264, 0.004, 0.00454624, 0.00515932, 0.00582928, 0.00654616, 0.0073, 0.008086507, 0.00890872, 0.00976768, 0.01066443, 0.0116, 0.01257317, 0.01358272, 0.01462968, 0.01571509, 0.01684, 0.01800736, 0.01921448, 0.02045392, 0.02171824, 0.023, 0.02429461, 0.02561024, 0.02695857, 0.02835125, 0.0298, 0.03131083, 0.03288368, 0.03452112, 0.03622571, 0.038, 0.03984667, 0.041768, 0.043766, 0.04584267, 0.048, 0.05024368, 0.05257304, 0.05498056, 0.05745872, 0.06, 0.06260197, 0.06527752, 0.06804208, 0.07091109, 0.0739, 0.077016, 0.0802664, 0.0836668, 0.0872328, 0.09098, 0.09491755, 0.09904584, 0.1033674, 0.1078846, 0.1126, 0.117532, 0.1226744, 0.1279928, 0.1334528, 0.13902, 0.1446764, 0.1504693, 0.1564619, 0.1627177, 0.1693, 0.1762431, 0.1835581, 0.1912735, 0.199418, 0.20802, 0.2171199, 0.2267345, 0.2368571, 0.2474812, 0.2586, 0.2701849, 0.2822939, 0.2950505, 0.308578, 0.323, 0.3384021, 0.3546858, 0.3716986, 0.3892875, 0.4073, 0.4256299, 0.4443096, 0.4633944, 0.4829395, 0.503, 0.5235693, 0.544512, 0.56569, 0.5869653, 0.6082, 0.6293456, 0.6503068, 0.6708752, 0.6908424, 0.71, 0.7281852, 0.7454636, 0.7619694, 0.7778368, 0.7932, 0.8081104, 0.8224962, 0.8363068, 0.8494916, 0.862, 0.8738108, 0.8849624, 0.8954936, 0.9054432, 0.9148501, 0.9237348, 0.9320924, 0.9399226, 0.9472252, 0.954, 0.9602561, 0.9660074, 0.9712606, 0.9760225, 0.9803, 0.9840924, 0.9874182, 0.9903128, 0.9928116, 0.9949501, 0.9967108, 0.9980983, 0.999112, 0.9997482, 1.0, 0.9998567, 0.9993046, 0.9983255, 0.9968987, 0.995, 0.9926005, 0.9897426, 0.9864444, 0.9827241, 0.9786, 0.9740837, 0.9691712, 0.9638568, 0.9581349, 0.952, 0.9454504, 0.9384992, 0.9311628, 0.9234576, 0.9154, 0.9070064, 0.8982772, 0.8892048, 0.8797816, 0.87, 0.8598613, 0.849392, 0.838622, 0.8275813, 0.8163, 0.8047947, 0.793082, 0.781192, 0.7691547, 0.757, 0.7447541, 0.7324224, 0.7200036, 0.7074965, 0.6949, 0.6822192, 0.6694716, 0.6566744, 0.6438448, 0.631, 0.6181555, 0.6053144, 0.5924756, 0.5796379, 0.5668, 0.5539611, 0.5411372, 0.5283528, 0.5156323, 0.503, 0.4904688, 0.4780304, 0.4656776, 0.4534032, 0.4412, 0.42908, 0.417036, 0.405032, 0.393032, 0.381, 0.3689184, 0.3568272, 0.3447768, 0.3328176, 0.321, 0.3093381, 0.2978504, 0.2865936, 0.2756245, 0.265, 0.2547632, 0.2448896, 0.2353344, 0.2260528, 0.217, 0.2081616, 0.1995488, 0.1911552, 0.1829744, 0.175, 0.1672235, 0.1596464, 0.1522776, 0.1451259, 0.1382, 0.1315003, 0.1250248, 0.1187792, 0.1127691, 0.107, 0.1014762, 0.09618864, 0.09112296, 0.08626485, 0.0816, 0.07712064, 0.07282552, 0.06871008, 0.06476976, 0.061, 0.05739621, 0.05395504, 0.05067376, 0.04754965, 0.04458, 0.04175872, 0.03908496, 0.03656384, 0.03420048, 0.032, 0.02996261, 0.02807664, 0.02632936, 0.02470805, 0.0232, 0.02180077, 0.02050112, 0.01928108, 0.01812069, 0.017, 0.01590379, 0.01483718, 0.01381068, 0.01283478, 0.01192, 0.01106831, 0.01027339, 0.009533311, 0.008846157, 0.00821, 0.007623781, 0.007085424, 0.006591476, 0.006138485, 0.005723, 0.005343059, 0.004995796, 0.004676404, 0.004380075, 0.004102, 0.003838453, 0.003589099, 0.003354219, 0.003134093, 0.002929, 0.002738139, 0.002559876, 0.002393244, 0.002237275, 0.002091, 0.001953587, 0.00182458, 0.00170358, 0.001590187, 0.001484, 0.001384496, 0.001291268, 0.001204092, 0.001122744, 0.001047, 9.7659E-4, 9.11109E-4, 8.50133E-4, 7.93238E-4, 7.4E-4, 6.90083E-4, 6.4331E-4, 5.99496E-4, 5.58455E-4, 5.2E-4, 4.83914E-4, 4.50053E-4, 4.18345E-4, 3.88718E-4, 3.611E-4, 3.35384E-4, 3.1144E-4, 2.89166E-4, 2.68454E-4, 2.492E-4, 2.31302E-4, 2.14686E-4, 1.99288E-4, 1.85048E-4, 1.719E-4, 1.59778E-4, 1.48604E-4, 1.38302E-4, 1.28793E-4, 1.2E-4, 1.1186E-4, 1.04322E-4, 9.73356E-5, 9.08459E-5, 8.48E-5, 7.91467E-5, 7.3858E-5, 6.8916E-5, 6.43027E-5, 6.0E-5, 5.59819E-5, 5.22256E-5, 4.87184E-5, 4.54475E-5, 4.24E-5, 3.9561E-5, 3.69151E-5, 3.44487E-5, 3.21482E-5, 3.0E-5, 2.79913E-5, 2.61136E-5, 2.43602E-5, 2.27246E-5, 2.12E-5, 1.97786E-5, 1.84529E-5, 1.72169E-5, 1.60646E-5, 1.499E-5};
    private double[] X = {0.001368,0.0015416,0.0017152,0.0018888,0.0020624,0.002236,0.0026374,0.0030388,0.0034402,0.0038416,0.004243,0.0049244,0.0056058,0.0062872,0.0069686,0.00765,0.008982,0.010314,0.011646,0.012978,0.01431,0.016086,0.017862,0.019638,0.021414,0.02319,0.027254,0.031318,0.035382,0.039446,0.04351,0.050334,0.057158,0.063982,0.070806,0.07763,0.08898,0.10033,0.11168,0.12303,0.13438,0.150458,0.166536,0.182614,0.198692,0.21477,0.228596,0.242422,0.256248,0.270074,0.2839,0.29282,0.30174,0.31066,0.31958,0.3285,0.332456,0.336412,0.340368,0.344324,0.34828,0.348236,0.348192,0.348148,0.348104,0.34806,0.345688,0.343316,0.340944,0.338572,0.3362,0.3327,0.3292,0.3257,0.3222,0.3187,0.31312,0.30754,0.30196,0.29638,0.2908,0.28286,0.27492,0.26698,0.25904,0.2511,0.239952,0.228804,0.217656,0.206508,0.19536,0.184708,0.174056,0.163404,0.152752,0.1421,0.132808,0.123516,0.114224,0.104932,0.09564,0.088102,0.080564,0.073026,0.065488,0.05795,0.052762,0.047574,0.042386,0.037198,0.03201,0.028548,0.025086,0.021624,0.018162,0.0147,0.01274,0.01078,0.00882,0.00686,0.0049,0.0044,0.0039,0.0034,0.0029,0.0024,0.00378,0.00516,0.00654,0.00792,0.0093,0.01326,0.01722,0.02118,0.02514,0.0291,0.035934,0.042768,0.049602,0.056436,0.06327,0.072536,0.081802,0.091068,0.100334,0.1096,0.12078,0.13196,0.14314,0.15432,0.1655,0.17755,0.1896,0.20165,0.2137,0.22575,0.23868,0.25161,0.26454,0.27747,0.2904,0.30426,0.31812,0.33198,0.34584,0.3597,0.37445,0.3892,0.40395,0.4187,0.43345,0.44917,0.46489,0.48061,0.49633,0.51205,0.52854,0.54503,0.56152,0.57801,0.5945,0.61128,0.62806,0.64484,0.66162,0.6784,0.69514,0.71188,0.72862,0.74536,0.7621,0.77818,0.79426,0.81034,0.82642,0.8425,0.85726,0.87202,0.88678,0.90154,0.9163,0.92876,0.94122,0.95368,0.96614,0.9786,0.98814,0.99768,1.00722,1.01676,1.0263,1.03238,1.03846,1.04454,1.05062,1.0567,1.0578,1.0589,1.06,1.0611,1.0622,1.05888,1.05556,1.05224,1.04892,1.0456,1.037,1.0284,1.0198,1.0112,1.0026,0.98976,0.97692,0.96408,0.95124,0.9384,0.92161,0.90482,0.88803,0.87124,0.85445,0.83384,0.81323,0.79262,0.77201,0.7514,0.7296,0.7078,0.686,0.6642,0.6424,0.6223,0.6022,0.5821,0.562,0.5419,0.5231,0.5043,0.4855,0.4667,0.4479,0.43048,0.41306,0.39564,0.37822,0.3608,0.34534,0.32988,0.31442,0.29896,0.2835,0.27054,0.25758,0.24462,0.23166,0.2187,0.20794,0.19718,0.18642,0.17566,0.1649,0.15616,0.14742,0.13868,0.12994,0.1212,0.11444,0.10768,0.10092,0.09416,0.0874,0.08264,0.07788,0.07312,0.06836,0.0636,0.060234,0.056868,0.053502,0.050136,0.04677,0.043996,0.041222,0.038448,0.035674,0.0329,0.03086,0.02882,0.02678,0.02474,0.0227,0.021328,0.019956,0.018584,0.017212,0.01584,0.0149438,0.0140476,0.0131514,0.0122552,0.011359,0.0107094,0.0100598,0.0094102,0.0087606,0.008111,0.0076468,0.0071826,0.0067184,0.0062542,0.00579,0.0054538,0.0051176,0.0047814,0.0044452,0.004109,0.003867,0.003625,0.003383,0.003141,0.002899,0.002729,0.002559,0.002389,0.002219,0.002049,0.0019272,0.0018054,0.0016836,0.0015618,0.00144,0.001352,0.001264,0.001176,0.001088,0.001,0.000938,0.000876,0.000814,0.000752,0.00069,0.0006472,0.0006044,0.0005616,0.0005188,0.000476,0.0004472,0.0004184,0.0003896,0.0003608,0.000332,0.0003126,0.0002932,0.0002738,0.0002544,0.000235,0.0002212,0.0002074,0.0001936,0.0001798,0.000166,0.0001562,0.0001464,0.0001366,0.0001268,0.000117,0.0001102,0.0001034,9.66E-05,8.98E-05,8.3E-05,7.82E-05,7.34E-05,6.86E-05,6.38E-05,0.000059,5.56E-05,5.22E-05,4.88E-05,4.54E-05,0.000042};
    private double[] Y = {0.000039,0.000044,0.000049,0.000054,0.000059,6.4E-05,7.52E-05,8.64E-05,9.76E-05,0.0001088,0.00012,0.0001394,0.0001588,0.0001782,0.0001976,0.000217,0.0002528,0.0002886,0.0003244,0.0003602,0.000396,0.0004448,0.0004936,0.0005424,0.0005912,0.00064,0.000754,0.000868,0.000982,0.001096,0.00121,0.001404,0.001598,0.001792,0.001986,0.00218,0.002544,0.002908,0.003272,0.003636,0.004,0.00466,0.00532,0.00598,0.00664,0.0073,0.00816,0.00902,0.00988,0.01074,0.0116,0.012648,0.013696,0.014744,0.015792,0.01684,0.018072,0.019304,0.020536,0.021768,0.023,0.02436,0.02572,0.02708,0.02844,0.0298,0.03144,0.03308,0.03472,0.03636,0.038,0.04,0.042,0.044,0.046,0.048,0.0504,0.0528,0.0552,0.0576,0.06,0.06278,0.06556,0.06834,0.07112,0.0739,0.077316,0.080732,0.084148,0.087564,0.09098,0.095304,0.099628,0.103952,0.108276,0.1126,0.117884,0.123168,0.128452,0.133736,0.13902,0.145076,0.151132,0.157188,0.163244,0.1693,0.177044,0.184788,0.192532,0.200276,0.20802,0.218136,0.228252,0.238368,0.248484,0.2586,0.27148,0.28436,0.29724,0.31012,0.323,0.33986,0.35672,0.37358,0.39044,0.4073,0.42644,0.44558,0.46472,0.48386,0.503,0.52404,0.54508,0.56612,0.58716,0.6082,0.62856,0.64892,0.66928,0.68964,0.71,0.72664,0.74328,0.75992,0.77656,0.7932,0.80696,0.82072,0.83448,0.84824,0.862,0.87257,0.88314,0.89371,0.90428,0.91485,0.92268,0.93051,0.93834,0.94617,0.954,0.95926,0.96452,0.96978,0.97504,0.9803,0.98323,0.98616,0.98909,0.99202,0.99495,0.99596,0.99697,0.99798,0.99899,1,0.999,0.998,0.997,0.996,0.995,0.99172,0.98844,0.98516,0.98188,0.9786,0.97328,0.96796,0.96264,0.95732,0.952,0.94468,0.93736,0.93004,0.92272,0.9154,0.90632,0.89724,0.88816,0.87908,0.87,0.85926,0.84852,0.83778,0.82704,0.8163,0.80444,0.79258,0.78072,0.76886,0.757,0.74458,0.73216,0.71974,0.70732,0.6949,0.68212,0.66934,0.65656,0.64378,0.631,0.61816,0.60532,0.59248,0.57964,0.5668,0.55404,0.54128,0.52852,0.51576,0.503,0.49064,0.47828,0.46592,0.45356,0.4412,0.42916,0.41712,0.40508,0.39304,0.381,0.369,0.357,0.345,0.333,0.321,0.3098,0.2986,0.2874,0.2762,0.265,0.2554,0.2458,0.2362,0.2266,0.217,0.2086,0.2002,0.1918,0.1834,0.175,0.16764,0.16028,0.15292,0.14556,0.1382,0.13196,0.12572,0.11948,0.11324,0.107,0.10192,0.09684,0.09176,0.08668,0.0816,0.07748,0.07336,0.06924,0.06512,0.061,0.057716,0.054432,0.051148,0.047864,0.04458,0.042064,0.039548,0.037032,0.034516,0.032,0.03024,0.02848,0.02672,0.02496,0.0232,0.02196,0.02072,0.01948,0.01824,0.017,0.015984,0.014968,0.013952,0.012936,0.01192,0.011178,0.010436,0.009694,0.008952,0.00821,0.0077126,0.0072152,0.0067178,0.0062204,0.005723,0.0053988,0.0050746,0.0047504,0.0044262,0.004102,0.0038674,0.0036328,0.0033982,0.0031636,0.002929,0.0027614,0.0025938,0.0024262,0.0022586,0.002091,0.0019696,0.0018482,0.0017268,0.0016054,0.001484,0.0013966,0.0013092,0.0012218,0.0011344,0.001047,0.0009856,0.0009242,0.0008628,0.0008014,0.00074,0.000696,0.000652,0.000608,0.000564,0.00052,0.0004882,0.0004564,0.0004246,0.0003928,0.000361,0.0003386,0.0003162,0.0002938,0.0002714,0.000249,0.0002336,0.0002182,0.0002028,0.0001874,0.000172,0.0001616,0.0001512,0.0001408,0.0001304,0.00012,0.000113,0.000106,9.9E-05,9.2E-05,0.000085,8E-05,0.000075,7E-05,0.000065,6E-05,5.64E-05,0.0000528,4.92E-05,4.56E-05,4.2E-05,3.96E-05,0.0000372,0.0000348,3.24E-05,3E-05,2.82E-05,0.0000264,2.46E-05,2.28E-05,0.000021,1.98E-05,1.86E-05,0.0000174,0.0000162,0.000015};
    private double[] Z = {0.00645,0.00727,0.00809,0.00891,0.00973,0.01055,0.01245,0.01435,0.01625,0.01815,0.02005,0.023282,0.026514,0.029746,0.032978,0.03621,0.042538,0.048866,0.055194,0.061522,0.06785,0.07632,0.08479,0.09326,0.10173,0.1102,0.12964,0.14908,0.16852,0.18796,0.2074,0.24018,0.27296,0.30574,0.33852,0.3713,0.42616,0.48102,0.53588,0.59074,0.6456,0.72429,0.80298,0.88167,0.96036,1.03905,1.10836,1.17767,1.24698,1.31629,1.3856,1.433072,1.480544,1.528016,1.575488,1.62296,1.64778,1.6726,1.69742,1.72224,1.74706,1.754168,1.761276,1.768384,1.775492,1.7826,1.780502,1.778404,1.776306,1.774208,1.77211,1.766508,1.760906,1.755304,1.749702,1.7441,1.72912,1.71414,1.69916,1.68418,1.6692,1.64098,1.61276,1.58454,1.55632,1.5281,1.480008,1.431916,1.383824,1.335732,1.28764,1.238492,1.189344,1.140196,1.091048,1.0419,0.99611,0.95032,0.90453,0.85874,0.81295,0.7736,0.73425,0.6949,0.65555,0.6162,0.585996,0.555792,0.525588,0.495384,0.46518,0.442804,0.420428,0.398052,0.375676,0.3533,0.33704,0.32078,0.30452,0.28826,0.272,0.26006,0.24812,0.23618,0.22424,0.2123,0.20148,0.19066,0.17984,0.16902,0.1582,0.1489,0.1396,0.1303,0.121,0.1117,0.10501,0.09832,0.09163,0.08494,0.07825,0.07405,0.06985,0.06565,0.06145,0.05725,0.054232,0.051214,0.048196,0.045178,0.04216,0.039696,0.037232,0.034768,0.032304,0.02984,0.027932,0.026024,0.024116,0.022208,0.0203,0.01892,0.01754,0.01616,0.01478,0.0134,0.01247,0.01154,0.01061,0.00968,0.00875,0.00815,0.00755,0.00695,0.00635,0.00575,0.00538,0.00501,0.00464,0.00427,0.0039,0.00367,0.00344,0.00321,0.00298,0.00275,0.00262,0.00249,0.00236,0.00223,0.0021,0.00204,0.00198,0.00192,0.00186,0.0018,0.00177,0.00174,0.00171,0.00168,0.00165,0.0016,0.00155,0.0015,0.00145,0.0014,0.00134,0.00128,0.00122,0.00116,0.0011,0.00108,0.00106,0.00104,0.00102,0.001,0.00096,0.00092,0.00088,0.00084,0.0008,0.00076,0.00072,0.00068,0.00064,0.0006,0.000548,0.000496,0.000444,0.000392,0.00034,0.00032,0.0003,0.00028,0.00026,0.00024,0.00023,0.00022,0.00021,0.0002,0.00019,0.000172,0.000154,0.000136,0.000118,0.0001,9E-05,8E-05,7E-05,6E-05,5E-05,0.000046,4.2E-05,3.8E-05,3.4E-05,3E-05,0.000028,0.000026,2.4E-05,2.2E-05,2E-05,0.000018,0.000016,1.4E-05,1.2E-05,0.00001,8E-06,6E-06,4E-06,2E-06,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

    private double[] Ref_data = {0.57897145,0.5797899,0.58085537,0.5821679,0.5837275,0.58553404,0.58758765,0.5898883,0.59243596,0.59523064,0.5982724,0.6008636,0.6040506,0.6078334,0.612212,0.6171864,0.6222077,0.6283737,0.63568443,0.64549935,0.65374005,0.65729696,0.6608343,0.66435224,0.6678507,0.6713296,0.67479056,0.6782313,0.6816518,0.68505204,0.6884321,0.6917932,0.69513345,0.69845283,0.7017513,0.70502895,0.7082868,0.71152323,0.71473825,0.71793187,0.7211041,0.72425574,0.7273856,0.7304935,0.7335796,0.73664373,0.7396868,0.74270755,0.7457061,0.7486824,0.7516364,0.75456876,0.7574786,0.76036584,0.76323056,0.76607275,0.7688928,0.7716901,0.7744646,0.7772164,0.7799454,0.78265184,0.7853355,0.7879961,0.7906339,0.7932488,0.79584086,0.79840994,0.8009561,0.80347914,0.80597925,0.8084564,0.8109106,0.8133417,0.81574976,0.8181349,0.82049686,0.8228359,0.825152,0.82744503,0.82971513,0.8319621,0.83418614,0.83638734,0.83856565,0.8407211,0.8428533,0.84496284,0.8470496,0.84911364,0.8511549,0.85317314,0.85516876,0.85714185,0.8590924,0.8610204,0.8629254,0.8648081,0.8666684,0.86850643,0.87032217,0.872115,0.8738858,0.87563455,0.8773613,0.87906593,0.880748,0.8824082,0.88404673,0.8856635,0.88725847,0.8888311,0.8903823,0.89191204,0.8934204,0.89490736,0.8963722,0.89781594,0.89923865,0.9006403,0.9020209,0.9033797,0.9047178,0.9060352,0.907332,0.9086081,0.9098627,0.91109705,0.9123112,0.913505,0.91467863,0.9158311,0.9169637,0.9180765,0.9191695,0.9202426,0.921295,0.92232805,0.9233417,0.9243359,0.92531073,0.9262653,0.92720085,0.9281175,0.9290153,0.9298941,0.930753,0.9315934,0.9324154,0.9332189,0.93400395,0.9347696,0.9355172,0.9362469,0.9369585,0.9376521,0.93832684,0.938984,0.93962365,0.94024587,0.9408505,0.94143665,0.9420058,0.94255793,0.94309306,0.94361115,0.9441112,0.9445948,0.94506186,0.94551235,0.94594634,0.9463628,0.9467633,0.94714767,0.9475161,0.9478684,0.94820374,0.9485236,0.94882786,0.9491166,0.9493898,0.9496465,0.9498881,0.9501147,0.9503263,0.9505229,0.9507034,0.9508694,0.95102084,0.95115775,0.9512801,0.9513869,0.95147973,0.9515585,0.9516232,0.95167387,0.9517095,0.95173156,0.9517401,0.951735,0.9517164,0.9516833,0.9516371,0.95157784,0.9515055,0.95142007,0.9513206,0.95120853,0.9510839,0.9509466,0.95079684,0.95063347,0.95045793,0.95027035,0.9500706,0.9498587,0.94963384,0.94939727,0.949149,0.94888914,0.9486176,0.9483335,0.94803816,0.9477317,0.947414,0.9470851,0.9467441,0.9463923,0.94602984,0.9456566,0.9452726,0.94487697,0.94447106,0.94405484,0.9436283,0.94319147,0.9427435,0.94228566,0.9418179,0.94134027,0.9408528,0.9403546,0.939847,0.9393299,0.9388034,0.9382674,0.93772113,0.93716586,0.9366016,0.93602824,0.9354459,0.9348537,0.93425286,0.93364346,0.93302536,0.9323987,0.93176264,0.9311183,0.93046576,0.929805,0.929136,0.928458,0.92777216,0.9270785,0.926377,0.92566764,0.92494977,0.9242244,0.92349154,0.9227512,0.92200345,0.9212475,0.9204844,0.9197143,0.9189371,0.91815275,0.9173606,0.9165617,0.91575617,0.9149438,0.9141248,0.91329825,0.9124654,0.9116261,0.9107805,0.90992844,0.90906936,0.9082042,0.907333,0.90645576,0.9055725,0.90468246,0.9037867,0.9028853,0.90197814,0.9010653,0.90014607,0.8992214,0.89829135,0.8973559,0.8964151,0.89546824,0.8945163,0.8935592,0.8925971,0.8916299,0.89065695,0.88967925,0.88869673,0.8877094,0.8867173,0.88571984,0.8847178,0.88371134,0.8827004,0.8816849,0.8806643,0.8796395,0.8786105,0.87757725,0.8765398,0.8754976,0.8744514,0.8734012,0.8723471,0.8712891,0.87022656,0.86916035,0.86809045,0.8670168,0.8659395,0.86485803,0.86377305,0.86268467,0.8615929,0.8604976,0.8593984,0.85829604,0.85719043,0.85608166,0.8549697,0.853854,0.8527354,0.8516138,0.8504893,0.8493618,0.8482309,0.8470972,0.84596086,0.84482175,0.8436799,0.84253484,0.84138733,0.84023726,0.8390847,0.8379296,0.83677155,0.8356112,0.8344486,0.83328366,0.83211637,0.83094645,0.8297743,0.82860017,0.8274239,0.82624555,0.82506466,0.82388186,0.82269716,0.82151055,0.82032204,0.81913126,0.81793875,0.8167445,0.81554854,0.8143509,0.8131511,0.8119498,0.81074697,0.8095426,0.8083367,0.80712885,0.80591965,0.80470914,0.8034972,0.8022839,0.8010689,0.7998527,0.7986353,0.79741675,0.79619694,0.79497564,0.79375327,0.7925298,0.79130536,0.7900799,0.78885126,0.78762263,0.786394,0.78516537,0.7839368};

    private double[] sample_x = {0.001368, 0.0015416, 0.0017152, 0.0018888, 0.0020624, 0.002236, 0.0026374, 0.0030388, 0.0034402, 0.0038416, 0.004243, 0.0049244, 0.0056058, 0.0062872, 0.0069686, 0.00765, 0.008982, 0.010314, 0.011646, 0.012978, 0.01431, 0.016086, 0.017862, 0.019638, 0.021414, 0.02319, 0.027254, 0.031318, 0.035382, 0.039446, 0.04351, 0.050334, 0.057158, 0.063982, 0.070806, 0.07763, 0.08898, 0.10033, 0.11168, 0.12303, 0.13438, 0.150458, 0.166536, 0.182614, 0.198692, 0.21477, 0.228596, 0.242422, 0.256248, 0.270074, 0.2839, 0.29282, 0.30174, 0.31066, 0.31958, 0.3285, 0.332456, 0.336412, 0.340368, 0.344324, 0.34828, 0.348236, 0.348192, 0.348148, 0.348104, 0.34806, 0.345688, 0.343316, 0.340944, 0.338572, 0.3362, 0.3327, 0.3292, 0.3257, 0.3222, 0.3187, 0.31312, 0.30754, 0.30196, 0.29638, 0.2908, 0.28286, 0.27492, 0.26698, 0.25904, 0.2511, 0.239952, 0.228804, 0.217656, 0.206508, 0.19536, 0.184708, 0.174056, 0.163404, 0.152752, 0.1421, 0.132808, 0.123516, 0.114224, 0.104932, 0.09564, 0.088102, 0.080564, 0.073026, 0.065488, 0.05795, 0.052762, 0.047574, 0.042386, 0.037198, 0.03201, 0.028548, 0.025086, 0.021624, 0.018162, 0.0147, 0.01274, 0.01078, 0.00882, 0.00686, 0.0049, 0.0044, 0.0039, 0.0034, 0.0029, 0.0024, 0.00378, 0.00516, 0.00654, 0.00792, 0.0093, 0.01326, 0.01722, 0.02118, 0.02514, 0.0291, 0.035934, 0.042768, 0.049602, 0.056436, 0.06327, 0.072536, 0.081802, 0.091068, 0.100334, 0.1096, 0.12078, 0.13196, 0.14314, 0.15432, 0.1655, 0.17755, 0.1896, 0.20165, 0.2137, 0.22575, 0.23868, 0.25161, 0.26454, 0.27747, 0.2904, 0.30426, 0.31812, 0.33198, 0.34584, 0.3597, 0.37445, 0.3892, 0.40395, 0.4187, 0.43345, 0.44917, 0.46489, 0.48061, 0.49633, 0.51205, 0.52854, 0.54503, 0.56152, 0.57801, 0.5945, 0.61128, 0.62806, 0.64484, 0.66162, 0.6784, 0.69514, 0.71188, 0.72862, 0.74536, 0.7621, 0.77818, 0.79426, 0.81034, 0.82642, 0.8425, 0.85726, 0.87202, 0.88678, 0.90154, 0.9163, 0.92876, 0.94122, 0.95368, 0.96614, 0.9786, 0.98814, 0.99768, 1.00722, 1.01676, 1.0263, 1.03238, 1.03846, 1.04454, 1.05062, 1.0567, 1.0578, 1.0589, 1.06, 1.0611, 1.0622, 1.05888, 1.05556, 1.05224, 1.04892, 1.0456, 1.037, 1.0284, 1.0198, 1.0112, 1.0026, 0.98976, 0.97692, 0.96408, 0.95124, 0.9384, 0.92161, 0.90482, 0.88803, 0.87124, 0.85445, 0.83384, 0.81323, 0.79262, 0.77201, 0.7514, 0.7296, 0.7078, 0.686, 0.6642, 0.6424, 0.6223, 0.6022, 0.5821, 0.562, 0.5419, 0.5231, 0.5043, 0.4855, 0.4667, 0.4479, 0.43048, 0.41306, 0.39564, 0.37822, 0.3608, 0.34534, 0.32988, 0.31442, 0.29896, 0.2835, 0.27054, 0.25758, 0.24462, 0.23166, 0.2187, 0.20794, 0.19718, 0.18642, 0.17566, 0.1649, 0.15616, 0.14742, 0.13868, 0.12994, 0.1212, 0.11444, 0.10768, 0.10092, 0.09416, 0.0874, 0.08264, 0.07788, 0.07312, 0.06836, 0.0636, 0.060234, 0.056868, 0.053502, 0.050136, 0.04677, 0.043996, 0.041222, 0.038448, 0.035674, 0.0329, 0.03086, 0.02882, 0.02678, 0.02474, 0.0227, 0.021328, 0.019956, 0.018584, 0.017212, 0.01584, 0.0149438, 0.0140476, 0.0131514, 0.0122552, 0.011359, 0.0107094, 0.0100598, 0.0094102, 0.0087606, 0.008111, 0.0076468, 0.0071826, 0.0067184, 0.0062542, 0.00579, 0.0054538, 0.0051176, 0.0047814, 0.0044452, 0.004109, 0.003867, 0.003625, 0.003383, 0.003141, 0.002899, 0.002729, 0.002559, 0.002389, 0.002219, 0.002049, 0.0019272, 0.0018054, 0.0016836, 0.0015618, 0.00144, 0.001352, 0.001264, 0.001176, 0.001088, 0.001, 0.000938, 0.000876, 0.000814, 0.000752, 0.00069, 0.0006472, 0.0006044, 0.0005616, 0.0005188, 0.000476, 0.0004472, 0.0004184, 0.0003896, 0.0003608, 0.000332, 0.0003126, 0.0002932, 0.0002738, 0.0002544, 0.000235, 0.0002212, 0.0002074, 0.0001936, 0.0001798, 0.000166, 0.0001562, 0.0001464, 0.0001366, 0.0001268, 0.000117, 0.0001102, 0.0001034, 9.66E-05, 8.98E-05, 8.3E-05, 7.82E-05, 7.34E-05, 6.86E-05, 6.38E-05, 0.000059, 5.56E-05, 5.22E-05, 4.88E-05, 4.54E-05, 0.000042};
    private double[] tcs_1 = {0.2190, 0.2230, 0.2270, 0.2310, 0.2350, 0.2390, 0.2416, 0.2442, 0.2468, 0.2494, 0.2520, 0.2528, 0.2536, 0.2544, 0.2552, 0.2560, 0.2560, 0.2560, 0.2560, 0.2560, 0.2560, 0.2556, 0.2552, 0.2548, 0.2544, 0.2540, 0.2536, 0.2532, 0.2528, 0.2524, 0.2520, 0.2512, 0.2504, 0.2496, 0.2488, 0.2480, 0.2472, 0.2464, 0.2456, 0.2448, 0.2440, 0.2432, 0.2424, 0.2416, 0.2408, 0.2400, 0.2394, 0.2388, 0.2382, 0.2376, 0.2370, 0.2360, 0.2350, 0.2340, 0.2330, 0.2320, 0.2316, 0.2312, 0.2308, 0.2304, 0.2300, 0.2292, 0.2284, 0.2276, 0.2268, 0.2260, 0.2258, 0.2256, 0.2254, 0.2252, 0.2250, 0.2244, 0.2238, 0.2232, 0.2226, 0.2220, 0.2216, 0.2212, 0.2208, 0.2204, 0.2200, 0.2196, 0.2192, 0.2188, 0.2184, 0.2180, 0.2176, 0.2172, 0.2168, 0.2164, 0.2160, 0.2156, 0.2152, 0.2148, 0.2144, 0.2140, 0.2140, 0.2140, 0.2140, 0.2140, 0.2140, 0.2140, 0.2140, 0.2140, 0.2140, 0.2140, 0.2144, 0.2148, 0.2152, 0.2156, 0.2160, 0.2164, 0.2168, 0.2172, 0.2176, 0.2180, 0.2190, 0.2200, 0.2210, 0.2220, 0.2230, 0.2234, 0.2238, 0.2242, 0.2246, 0.2250, 0.2252, 0.2254, 0.2256, 0.2258, 0.2260, 0.2260, 0.2260, 0.2260, 0.2260, 0.2260, 0.2258, 0.2256, 0.2254, 0.2252, 0.2250, 0.2250, 0.2250, 0.2250, 0.2250, 0.2250, 0.2254, 0.2258, 0.2262, 0.2266, 0.2270, 0.2276, 0.2282, 0.2288, 0.2294, 0.2300, 0.2312, 0.2324, 0.2336, 0.2348, 0.2360, 0.2378, 0.2396, 0.2414, 0.2432, 0.2450, 0.2466, 0.2482, 0.2498, 0.2514, 0.2530, 0.2548, 0.2566, 0.2584, 0.2602, 0.2620, 0.2640, 0.2660, 0.2680, 0.2700, 0.2720, 0.2742, 0.2764, 0.2786, 0.2808, 0.2830, 0.2860, 0.2890, 0.2920, 0.2950, 0.2980, 0.3020, 0.3060, 0.3100, 0.3140, 0.3180, 0.3226, 0.3272, 0.3318, 0.3364, 0.3410, 0.3462, 0.3514, 0.3566, 0.3618, 0.3670, 0.3716, 0.3762, 0.3808, 0.3854, 0.3900, 0.3938, 0.3976, 0.4014, 0.4052, 0.4090, 0.4120, 0.4150, 0.4180, 0.4210, 0.4240, 0.4262, 0.4284, 0.4306, 0.4328, 0.4350, 0.4364, 0.4378, 0.4392, 0.4406, 0.4420, 0.4432, 0.4444, 0.4456, 0.4468, 0.4480, 0.4484, 0.4488, 0.4492, 0.4496, 0.4500, 0.4502, 0.4504, 0.4506, 0.4508, 0.4510, 0.4510, 0.4510, 0.4510, 0.4510, 0.4510, 0.4510, 0.4510, 0.4510, 0.4510, 0.4510, 0.4510, 0.4510, 0.4510, 0.4510, 0.4510, 0.4510, 0.4510, 0.4510, 0.4510, 0.4510, 0.4508, 0.4506, 0.4504, 0.4502, 0.4500, 0.4500, 0.4500, 0.4500, 0.4500, 0.4500, 0.4502, 0.4504, 0.4506, 0.4508, 0.4510, 0.4510, 0.4510, 0.4510, 0.4510, 0.4510, 0.4514, 0.4518, 0.4522, 0.4526, 0.4530, 0.4532, 0.4534, 0.4536, 0.4538, 0.4540, 0.4542, 0.4544, 0.4546, 0.4548, 0.4550, 0.4554, 0.4558, 0.4562, 0.4566, 0.4570, 0.4572, 0.4574, 0.4576, 0.4578, 0.4580, 0.4584, 0.4588, 0.4592, 0.4596, 0.4600, 0.4604, 0.4608, 0.4612, 0.4616, 0.4620, 0.4622, 0.4624, 0.4626, 0.4628, 0.4630, 0.4632, 0.4634, 0.4636, 0.4638, 0.4640, 0.4642, 0.4644, 0.4646, 0.4648, 0.4650, 0.4652, 0.4654, 0.4656, 0.4658, 0.4660, 0.4660, 0.4660, 0.4660, 0.4660, 0.4660, 0.4660, 0.4660, 0.4660, 0.4660, 0.4660, 0.4660, 0.4660, 0.4660, 0.4660, 0.4660, 0.4662, 0.4664, 0.4666, 0.4668, 0.4670, 0.4670, 0.4670, 0.4670, 0.4670, 0.4670, 0.4670, 0.4670, 0.4670, 0.4670, 0.4670, 0.4670, 0.4670, 0.4670, 0.4670, 0.4670, 0.4670, 0.4670, 0.4670, 0.4670, 0.4670, 0.4670, 0.4670, 0.4670, 0.4670, 0.4670, 0.4670, 0.4670, 0.4670, 0.4670, 0.4670, 0.4670, 0.4670, 0.4670, 0.4670, 0.4670, 0.4670, 0.4670, 0.4670, 0.4670, 0.4670};
    private double[] tcs_2 = {0.0700, 0.0718, 0.0736, 0.0754, 0.0772, 0.0790, 0.0810, 0.0830, 0.0850, 0.0870, 0.0890, 0.0914, 0.0938, 0.0962, 0.0986, 0.1010, 0.1030, 0.1050, 0.1070, 0.1090, 0.1110, 0.1120, 0.1130, 0.1140, 0.1150, 0.1160, 0.1164, 0.1168, 0.1172, 0.1176, 0.1180, 0.1184, 0.1188, 0.1192, 0.1196, 0.1200, 0.1202, 0.1204, 0.1206, 0.1208, 0.1210, 0.1212, 0.1214, 0.1216, 0.1218, 0.1220, 0.1220, 0.1220, 0.1220, 0.1220, 0.1220, 0.1220, 0.1220, 0.1220, 0.1220, 0.1220, 0.1222, 0.1224, 0.1226, 0.1228, 0.1230, 0.1232, 0.1234, 0.1236, 0.1238, 0.1240, 0.1246, 0.1252, 0.1258, 0.1264, 0.1270, 0.1272, 0.1274, 0.1276, 0.1278, 0.1280, 0.1286, 0.1292, 0.1298, 0.1304, 0.1310, 0.1316, 0.1322, 0.1328, 0.1334, 0.1340, 0.1348, 0.1356, 0.1364, 0.1372, 0.1380, 0.1390, 0.1400, 0.1410, 0.1420, 0.1430, 0.1444, 0.1458, 0.1472, 0.1486, 0.1500, 0.1518, 0.1536, 0.1554, 0.1572, 0.1590, 0.1620, 0.1650, 0.1680, 0.1710, 0.1740, 0.1772, 0.1804, 0.1836, 0.1868, 0.1900, 0.1934, 0.1968, 0.2002, 0.2036, 0.2070, 0.2106, 0.2142, 0.2178, 0.2214, 0.2250, 0.2284, 0.2318, 0.2352, 0.2386, 0.2420, 0.2442, 0.2464, 0.2486, 0.2508, 0.2530, 0.2544, 0.2558, 0.2572, 0.2586, 0.2600, 0.2608, 0.2616, 0.2624, 0.2632, 0.2640, 0.2646, 0.2652, 0.2658, 0.2664, 0.2670, 0.2674, 0.2678, 0.2682, 0.2686, 0.2690, 0.2696, 0.2702, 0.2708, 0.2714, 0.2720, 0.2728, 0.2736, 0.2744, 0.2752, 0.2760, 0.2772, 0.2784, 0.2796, 0.2808, 0.2820, 0.2834, 0.2848, 0.2862, 0.2876, 0.2890, 0.2910, 0.2930, 0.2950, 0.2970, 0.2990, 0.3010, 0.3030, 0.3050, 0.3070, 0.3090, 0.3116, 0.3142, 0.3168, 0.3194, 0.3220, 0.3234, 0.3248, 0.3262, 0.3276, 0.3290, 0.3302, 0.3314, 0.3326, 0.3338, 0.3350, 0.3358, 0.3366, 0.3374, 0.3382, 0.3390, 0.3394, 0.3398, 0.3402, 0.3406, 0.3410, 0.3410, 0.3410, 0.3410, 0.3410, 0.3410, 0.3412, 0.3414, 0.3416, 0.3418, 0.3420, 0.3420, 0.3420, 0.3420, 0.3420, 0.3420, 0.3420, 0.3420, 0.3420, 0.3420, 0.3420, 0.3418, 0.3416, 0.3414, 0.3412, 0.3410, 0.3410, 0.3410, 0.3410, 0.3410, 0.3410, 0.3406, 0.3402, 0.3398, 0.3394, 0.3390, 0.3390, 0.3390, 0.3390, 0.3390, 0.3390, 0.3388, 0.3386, 0.3384, 0.3382, 0.3380, 0.3380, 0.3380, 0.3380, 0.3380, 0.3380, 0.3378, 0.3376, 0.3374, 0.3372, 0.3370, 0.3368, 0.3366, 0.3364, 0.3362, 0.3360, 0.3358, 0.3356, 0.3354, 0.3352, 0.3350, 0.3348, 0.3346, 0.3344, 0.3342, 0.3340, 0.3336, 0.3332, 0.3328, 0.3324, 0.3320, 0.3320, 0.3320, 0.3320, 0.3320, 0.3320, 0.3318, 0.3316, 0.3314, 0.3312, 0.3310, 0.3310, 0.3310, 0.3310, 0.3310, 0.3310, 0.3308, 0.3306, 0.3304, 0.3302, 0.3300, 0.3298, 0.3296, 0.3294, 0.3292, 0.3290, 0.3288, 0.3286, 0.3284, 0.3282, 0.3280, 0.3280, 0.3280, 0.3280, 0.3280, 0.3280, 0.3278, 0.3276, 0.3274, 0.3272, 0.3270, 0.3268, 0.3266, 0.3264, 0.3262, 0.3260, 0.3258, 0.3256, 0.3254, 0.3252, 0.3250, 0.3248, 0.3246, 0.3244, 0.3242, 0.3240, 0.3240, 0.3240, 0.3240, 0.3240, 0.3240, 0.3240, 0.3240, 0.3240, 0.3240, 0.3240, 0.3238, 0.3236, 0.3234, 0.3232, 0.3230, 0.3228, 0.3226, 0.3224, 0.3222, 0.3220, 0.3218, 0.3216, 0.3214, 0.3212, 0.3210, 0.3208, 0.3206, 0.3204, 0.3202, 0.3200, 0.3196, 0.3192, 0.3188, 0.3184, 0.3180, 0.3176, 0.3172, 0.3168, 0.3164, 0.3160, 0.3158, 0.3156, 0.3154, 0.3152, 0.3150, 0.3150, 0.3150, 0.3150, 0.3150, 0.3150, 0.3148, 0.3146, 0.3144, 0.3142, 0.3140, 0.3140, 0.3140, 0.3140, 0.3140, 0.3140};
    private double[] tcs_3 = {0.0650, 0.0656, 0.0662, 0.0668, 0.0674, 0.0680, 0.0684, 0.0688, 0.0692, 0.0696, 0.0700, 0.0704, 0.0708, 0.0712, 0.0716, 0.0720, 0.0722, 0.0724, 0.0726, 0.0728, 0.0730, 0.0730, 0.0730, 0.0730, 0.0730, 0.0730, 0.0732, 0.0734, 0.0736, 0.0738, 0.0740, 0.0740, 0.0740, 0.0740, 0.0740, 0.0740, 0.0740, 0.0740, 0.0740, 0.0740, 0.0740, 0.0738, 0.0736, 0.0734, 0.0732, 0.0730, 0.0730, 0.0730, 0.0730, 0.0730, 0.0730, 0.0730, 0.0730, 0.0730, 0.0730, 0.0730, 0.0730, 0.0730, 0.0730, 0.0730, 0.0730, 0.0730, 0.0730, 0.0730, 0.0730, 0.0730, 0.0732, 0.0734, 0.0736, 0.0738, 0.0740, 0.0742, 0.0744, 0.0746, 0.0748, 0.0750, 0.0754, 0.0758, 0.0762, 0.0766, 0.0770, 0.0776, 0.0782, 0.0788, 0.0794, 0.0800, 0.0810, 0.0820, 0.0830, 0.0840, 0.0850, 0.0868, 0.0886, 0.0904, 0.0922, 0.0940, 0.0970, 0.1000, 0.1030, 0.1060, 0.1090, 0.1124, 0.1158, 0.1192, 0.1226, 0.1260, 0.1304, 0.1348, 0.1392, 0.1436, 0.1480, 0.1528, 0.1576, 0.1624, 0.1672, 0.1720, 0.1772, 0.1824, 0.1876, 0.1928, 0.1980, 0.2026, 0.2072, 0.2118, 0.2164, 0.2210, 0.2250, 0.2290, 0.2330, 0.2370, 0.2410, 0.2448, 0.2486, 0.2524, 0.2562, 0.2600, 0.2636, 0.2672, 0.2708, 0.2744, 0.2780, 0.2828, 0.2876, 0.2924, 0.2972, 0.3020, 0.3094, 0.3168, 0.3242, 0.3316, 0.3390, 0.3452, 0.3514, 0.3576, 0.3638, 0.3700, 0.3744, 0.3788, 0.3832, 0.3876, 0.3920, 0.3934, 0.3948, 0.3962, 0.3976, 0.3990, 0.3992, 0.3994, 0.3996, 0.3998, 0.4000, 0.3986, 0.3972, 0.3958, 0.3944, 0.3930, 0.3904, 0.3878, 0.3852, 0.3826, 0.3800, 0.3770, 0.3740, 0.3710, 0.3680, 0.3650, 0.3618, 0.3586, 0.3554, 0.3522, 0.3490, 0.3456, 0.3422, 0.3388, 0.3354, 0.3320, 0.3286, 0.3252, 0.3218, 0.3184, 0.3150, 0.3118, 0.3086, 0.3054, 0.3022, 0.2990, 0.2962, 0.2934, 0.2906, 0.2878, 0.2850, 0.2824, 0.2798, 0.2772, 0.2746, 0.2720, 0.2704, 0.2688, 0.2672, 0.2656, 0.2640, 0.2626, 0.2612, 0.2598, 0.2584, 0.2570, 0.2560, 0.2550, 0.2540, 0.2530, 0.2520, 0.2510, 0.2500, 0.2490, 0.2480, 0.2470, 0.2458, 0.2446, 0.2434, 0.2422, 0.2410, 0.2398, 0.2386, 0.2374, 0.2362, 0.2350, 0.2338, 0.2326, 0.2314, 0.2302, 0.2290, 0.2280, 0.2270, 0.2260, 0.2250, 0.2240, 0.2232, 0.2224, 0.2216, 0.2208, 0.2200, 0.2194, 0.2188, 0.2182, 0.2176, 0.2170, 0.2168, 0.2166, 0.2164, 0.2162, 0.2160, 0.2160, 0.2160, 0.2160, 0.2160, 0.2160, 0.2166, 0.2172, 0.2178, 0.2184, 0.2190, 0.2200, 0.2210, 0.2220, 0.2230, 0.2240, 0.2252, 0.2264, 0.2276, 0.2288, 0.2300, 0.2316, 0.2332, 0.2348, 0.2364, 0.2380, 0.2406, 0.2432, 0.2458, 0.2484, 0.2510, 0.2546, 0.2582, 0.2618, 0.2654, 0.2690, 0.2728, 0.2766, 0.2804, 0.2842, 0.2880, 0.2928, 0.2976, 0.3024, 0.3072, 0.3120, 0.3176, 0.3232, 0.3288, 0.3344, 0.3400, 0.3452, 0.3504, 0.3556, 0.3608, 0.3660, 0.3708, 0.3756, 0.3804, 0.3852, 0.3900, 0.3944, 0.3988, 0.4032, 0.4076, 0.4120, 0.4158, 0.4196, 0.4234, 0.4272, 0.4310, 0.4342, 0.4374, 0.4406, 0.4438, 0.4470, 0.4496, 0.4522, 0.4548, 0.4574, 0.4600, 0.4624, 0.4648, 0.4672, 0.4696, 0.4720, 0.4738, 0.4756, 0.4774, 0.4792, 0.4810, 0.4824, 0.4838, 0.4852, 0.4866, 0.4880, 0.4890, 0.4900, 0.4910, 0.4920, 0.4930, 0.4938, 0.4946, 0.4954, 0.4962, 0.4970, 0.4976, 0.4982, 0.4988, 0.4994, 0.5000, 0.5004, 0.5008, 0.5012, 0.5016, 0.5020, 0.5026, 0.5032, 0.5038, 0.5044, 0.5050, 0.5060, 0.5070, 0.5080, 0.5090, 0.5100, 0.5112, 0.5124, 0.5136, 0.5148, 0.5160};
    private double[] tcs_4 = {0.0740, 0.0758, 0.0776, 0.0794, 0.0812, 0.0830, 0.0850, 0.0870, 0.0890, 0.0910, 0.0930, 0.0954, 0.0978, 0.1002, 0.1026, 0.1050, 0.1072, 0.1094, 0.1116, 0.1138, 0.1160, 0.1170, 0.1180, 0.1190, 0.1200, 0.1210, 0.1216, 0.1222, 0.1228, 0.1234, 0.1240, 0.1244, 0.1248, 0.1252, 0.1256, 0.1260, 0.1264, 0.1268, 0.1272, 0.1276, 0.1280, 0.1286, 0.1292, 0.1298, 0.1304, 0.1310, 0.1318, 0.1326, 0.1334, 0.1342, 0.1350, 0.1358, 0.1366, 0.1374, 0.1382, 0.1390, 0.1400, 0.1410, 0.1420, 0.1430, 0.1440, 0.1454, 0.1468, 0.1482, 0.1496, 0.1510, 0.1530, 0.1550, 0.1570, 0.1590, 0.1610, 0.1632, 0.1654, 0.1676, 0.1698, 0.1720, 0.1748, 0.1776, 0.1804, 0.1832, 0.1860, 0.1898, 0.1936, 0.1974, 0.2012, 0.2050, 0.2098, 0.2146, 0.2194, 0.2242, 0.2290, 0.2340, 0.2390, 0.2440, 0.2490, 0.2540, 0.2594, 0.2648, 0.2702, 0.2756, 0.2810, 0.2864, 0.2918, 0.2972, 0.3026, 0.3080, 0.3128, 0.3176, 0.3224, 0.3272, 0.3320, 0.3360, 0.3400, 0.3440, 0.3480, 0.3520, 0.3556, 0.3592, 0.3628, 0.3664, 0.3700, 0.3726, 0.3752, 0.3778, 0.3804, 0.3830, 0.3844, 0.3858, 0.3872, 0.3886, 0.3900, 0.3908, 0.3916, 0.3924, 0.3932, 0.3940, 0.3942, 0.3944, 0.3946, 0.3948, 0.3950, 0.3944, 0.3938, 0.3932, 0.3926, 0.3920, 0.3906, 0.3892, 0.3878, 0.3864, 0.3850, 0.3834, 0.3818, 0.3802, 0.3786, 0.3770, 0.3750, 0.3730, 0.3710, 0.3690, 0.3670, 0.3644, 0.3618, 0.3592, 0.3566, 0.3540, 0.3514, 0.3488, 0.3462, 0.3436, 0.3410, 0.3382, 0.3354, 0.3326, 0.3298, 0.3270, 0.3240, 0.3210, 0.3180, 0.3150, 0.3120, 0.3088, 0.3056, 0.3024, 0.2992, 0.2960, 0.2928, 0.2896, 0.2864, 0.2832, 0.2800, 0.2766, 0.2732, 0.2698, 0.2664, 0.2630, 0.2598, 0.2566, 0.2534, 0.2502, 0.2470, 0.2434, 0.2398, 0.2362, 0.2326, 0.2290, 0.2260, 0.2230, 0.2200, 0.2170, 0.2140, 0.2108, 0.2076, 0.2044, 0.2012, 0.1980, 0.1954, 0.1928, 0.1902, 0.1876, 0.1850, 0.1830, 0.1810, 0.1790, 0.1770, 0.1750, 0.1738, 0.1726, 0.1714, 0.1702, 0.1690, 0.1680, 0.1670, 0.1660, 0.1650, 0.1640, 0.1632, 0.1624, 0.1616, 0.1608, 0.1600, 0.1592, 0.1584, 0.1576, 0.1568, 0.1560, 0.1556, 0.1552, 0.1548, 0.1544, 0.1540, 0.1536, 0.1532, 0.1528, 0.1524, 0.1520, 0.1518, 0.1516, 0.1514, 0.1512, 0.1510, 0.1506, 0.1502, 0.1498, 0.1494, 0.1490, 0.1488, 0.1486, 0.1484, 0.1482, 0.1480, 0.1480, 0.1480, 0.1480, 0.1480, 0.1480, 0.1480, 0.1480, 0.1480, 0.1480, 0.1480, 0.1482, 0.1484, 0.1486, 0.1488, 0.1490, 0.1494, 0.1498, 0.1502, 0.1506, 0.1510, 0.1516, 0.1522, 0.1528, 0.1534, 0.1540, 0.1548, 0.1556, 0.1564, 0.1572, 0.1580, 0.1588, 0.1596, 0.1604, 0.1612, 0.1620, 0.1626, 0.1632, 0.1638, 0.1644, 0.1650, 0.1656, 0.1662, 0.1668, 0.1674, 0.1680, 0.1684, 0.1688, 0.1692, 0.1696, 0.1700, 0.1702, 0.1704, 0.1706, 0.1708, 0.1710, 0.1708, 0.1706, 0.1704, 0.1702, 0.1700, 0.1696, 0.1692, 0.1688, 0.1684, 0.1680, 0.1676, 0.1672, 0.1668, 0.1664, 0.1660, 0.1656, 0.1652, 0.1648, 0.1644, 0.1640, 0.1640, 0.1640, 0.1640, 0.1640, 0.1640, 0.1642, 0.1644, 0.1646, 0.1648, 0.1650, 0.1656, 0.1662, 0.1668, 0.1674, 0.1680, 0.1688, 0.1696, 0.1704, 0.1712, 0.1720, 0.1730, 0.1740, 0.1750, 0.1760, 0.1770, 0.1778, 0.1786, 0.1794, 0.1802, 0.1810, 0.1818, 0.1826, 0.1834, 0.1842, 0.1850, 0.1858, 0.1866, 0.1874, 0.1882, 0.1890, 0.1896, 0.1902, 0.1908, 0.1914, 0.1920, 0.1924, 0.1928, 0.1932, 0.1936, 0.1940, 0.1946, 0.1952, 0.1958, 0.1964, 0.1970};
    private double[] tcs_5 = {0.2950, 0.2972, 0.2994, 0.3016, 0.3038, 0.3060, 0.3068, 0.3076, 0.3084, 0.3092, 0.3100, 0.3104, 0.3108, 0.3112, 0.3116, 0.3120, 0.3122, 0.3124, 0.3126, 0.3128, 0.3130, 0.3134, 0.3138, 0.3142, 0.3146, 0.3150, 0.3158, 0.3166, 0.3174, 0.3182, 0.3190, 0.3196, 0.3202, 0.3208, 0.3214, 0.3220, 0.3228, 0.3236, 0.3244, 0.3252, 0.3260, 0.3268, 0.3276, 0.3284, 0.3292, 0.3300, 0.3308, 0.3316, 0.3324, 0.3332, 0.3340, 0.3350, 0.3360, 0.3370, 0.3380, 0.3390, 0.3404, 0.3418, 0.3432, 0.3446, 0.3460, 0.3472, 0.3484, 0.3496, 0.3508, 0.3520, 0.3536, 0.3552, 0.3568, 0.3584, 0.3600, 0.3618, 0.3636, 0.3654, 0.3672, 0.3690, 0.3714, 0.3738, 0.3762, 0.3786, 0.3810, 0.3836, 0.3862, 0.3888, 0.3914, 0.3940, 0.3958, 0.3976, 0.3994, 0.4012, 0.4030, 0.4044, 0.4058, 0.4072, 0.4086, 0.4100, 0.4110, 0.4120, 0.4130, 0.4140, 0.4150, 0.4156, 0.4162, 0.4168, 0.4174, 0.4180, 0.4182, 0.4184, 0.4186, 0.4188, 0.4190, 0.4186, 0.4182, 0.4178, 0.4174, 0.4170, 0.4162, 0.4154, 0.4146, 0.4138, 0.4130, 0.4122, 0.4114, 0.4106, 0.4098, 0.4090, 0.4078, 0.4066, 0.4054, 0.4042, 0.4030, 0.4016, 0.4002, 0.3988, 0.3974, 0.3960, 0.3946, 0.3932, 0.3918, 0.3904, 0.3890, 0.3874, 0.3858, 0.3842, 0.3826, 0.3810, 0.3792, 0.3774, 0.3756, 0.3738, 0.3720, 0.3702, 0.3684, 0.3666, 0.3648, 0.3630, 0.3610, 0.3590, 0.3570, 0.3550, 0.3530, 0.3508, 0.3486, 0.3464, 0.3442, 0.3420, 0.3398, 0.3376, 0.3354, 0.3332, 0.3310, 0.3288, 0.3266, 0.3244, 0.3222, 0.3200, 0.3176, 0.3152, 0.3128, 0.3104, 0.3080, 0.3056, 0.3032, 0.3008, 0.2984, 0.2960, 0.2936, 0.2912, 0.2888, 0.2864, 0.2840, 0.2814, 0.2788, 0.2762, 0.2736, 0.2710, 0.2688, 0.2666, 0.2644, 0.2622, 0.2600, 0.2574, 0.2548, 0.2522, 0.2496, 0.2470, 0.2440, 0.2410, 0.2380, 0.2350, 0.2320, 0.2296, 0.2272, 0.2248, 0.2224, 0.2200, 0.2180, 0.2160, 0.2140, 0.2120, 0.2100, 0.2080, 0.2060, 0.2040, 0.2020, 0.2000, 0.1988, 0.1976, 0.1964, 0.1952, 0.1940, 0.1930, 0.1920, 0.1910, 0.1900, 0.1890, 0.1882, 0.1874, 0.1866, 0.1858, 0.1850, 0.1846, 0.1842, 0.1838, 0.1834, 0.1830, 0.1824, 0.1818, 0.1812, 0.1806, 0.1800, 0.1794, 0.1788, 0.1782, 0.1776, 0.1770, 0.1768, 0.1766, 0.1764, 0.1762, 0.1760, 0.1758, 0.1756, 0.1754, 0.1752, 0.1750, 0.1750, 0.1750, 0.1750, 0.1750, 0.1750, 0.1750, 0.1750, 0.1750, 0.1750, 0.1750, 0.1750, 0.1750, 0.1750, 0.1750, 0.1750, 0.1754, 0.1758, 0.1762, 0.1766, 0.1770, 0.1776, 0.1782, 0.1788, 0.1794, 0.1800, 0.1806, 0.1812, 0.1818, 0.1824, 0.1830, 0.1836, 0.1842, 0.1848, 0.1854, 0.1860, 0.1866, 0.1872, 0.1878, 0.1884, 0.1890, 0.1896, 0.1902, 0.1908, 0.1914, 0.1920, 0.1926, 0.1932, 0.1938, 0.1944, 0.1950, 0.1958, 0.1966, 0.1974, 0.1982, 0.1990, 0.1992, 0.1994, 0.1996, 0.1998, 0.2000, 0.1998, 0.1996, 0.1994, 0.1992, 0.1990, 0.1988, 0.1986, 0.1984, 0.1982, 0.1980, 0.1976, 0.1972, 0.1968, 0.1964, 0.1960, 0.1958, 0.1956, 0.1954, 0.1952, 0.1950, 0.1950, 0.1950, 0.1950, 0.1950, 0.1950, 0.1952, 0.1954, 0.1956, 0.1958, 0.1960, 0.1962, 0.1964, 0.1966, 0.1968, 0.1970, 0.1976, 0.1982, 0.1988, 0.1994, 0.2000, 0.2006, 0.2012, 0.2018, 0.2024, 0.2030, 0.2034, 0.2038, 0.2042, 0.2046, 0.2050, 0.2056, 0.2062, 0.2068, 0.2074, 0.2080, 0.2088, 0.2096, 0.2104, 0.2112, 0.2120, 0.2126, 0.2132, 0.2138, 0.2144, 0.2150, 0.2154, 0.2158, 0.2162, 0.2166, 0.2170, 0.2174, 0.2178, 0.2182, 0.2186, 0.2190};
    private double[] tcs_6 = {0.1510, 0.1614, 0.1718, 0.1822, 0.1926, 0.2030, 0.2154, 0.2278, 0.2402, 0.2526, 0.2650, 0.2798, 0.2946, 0.3094, 0.3242, 0.3390, 0.3532, 0.3674, 0.3816, 0.3958, 0.4100, 0.4208, 0.4316, 0.4424, 0.4532, 0.4640, 0.4696, 0.4752, 0.4808, 0.4864, 0.4920, 0.4952, 0.4984, 0.5016, 0.5048, 0.5080, 0.5098, 0.5116, 0.5134, 0.5152, 0.5170, 0.5184, 0.5198, 0.5212, 0.5226, 0.5240, 0.5254, 0.5268, 0.5282, 0.5296, 0.5310, 0.5324, 0.5338, 0.5352, 0.5366, 0.5380, 0.5392, 0.5404, 0.5416, 0.5428, 0.5440, 0.5454, 0.5468, 0.5482, 0.5496, 0.5510, 0.5520, 0.5530, 0.5540, 0.5550, 0.5560, 0.5560, 0.5560, 0.5560, 0.5560, 0.5560, 0.5556, 0.5552, 0.5548, 0.5544, 0.5540, 0.5530, 0.5520, 0.5510, 0.5500, 0.5490, 0.5474, 0.5458, 0.5442, 0.5426, 0.5410, 0.5390, 0.5370, 0.5350, 0.5330, 0.5310, 0.5286, 0.5262, 0.5238, 0.5214, 0.5190, 0.5160, 0.5130, 0.5100, 0.5070, 0.5040, 0.5008, 0.4976, 0.4944, 0.4912, 0.4880, 0.4842, 0.4804, 0.4766, 0.4728, 0.4690, 0.4652, 0.4614, 0.4576, 0.4538, 0.4500, 0.4462, 0.4424, 0.4386, 0.4348, 0.4310, 0.4276, 0.4242, 0.4208, 0.4174, 0.4140, 0.4102, 0.4064, 0.4026, 0.3988, 0.3950, 0.3914, 0.3878, 0.3842, 0.3806, 0.3770, 0.3732, 0.3694, 0.3656, 0.3618, 0.3580, 0.3546, 0.3512, 0.3478, 0.3444, 0.3410, 0.3378, 0.3346, 0.3314, 0.3282, 0.3250, 0.3218, 0.3186, 0.3154, 0.3122, 0.3090, 0.3058, 0.3026, 0.2994, 0.2962, 0.2930, 0.2902, 0.2874, 0.2846, 0.2818, 0.2790, 0.2762, 0.2734, 0.2706, 0.2678, 0.2650, 0.2626, 0.2602, 0.2578, 0.2554, 0.2530, 0.2506, 0.2482, 0.2458, 0.2434, 0.2410, 0.2396, 0.2382, 0.2368, 0.2354, 0.2340, 0.2326, 0.2312, 0.2298, 0.2284, 0.2270, 0.2266, 0.2262, 0.2258, 0.2254, 0.2250, 0.2244, 0.2238, 0.2232, 0.2226, 0.2220, 0.2218, 0.2216, 0.2214, 0.2212, 0.2210, 0.2208, 0.2206, 0.2204, 0.2202, 0.2200, 0.2200, 0.2200, 0.2200, 0.2200, 0.2200, 0.2200, 0.2200, 0.2200, 0.2200, 0.2200, 0.2200, 0.2200, 0.2200, 0.2200, 0.2200, 0.2200, 0.2200, 0.2200, 0.2200, 0.2200, 0.2206, 0.2212, 0.2218, 0.2224, 0.2230, 0.2238, 0.2246, 0.2254, 0.2262, 0.2270, 0.2282, 0.2294, 0.2306, 0.2318, 0.2330, 0.2342, 0.2354, 0.2366, 0.2378, 0.2390, 0.2400, 0.2410, 0.2420, 0.2430, 0.2440, 0.2454, 0.2468, 0.2482, 0.2496, 0.2510, 0.2524, 0.2538, 0.2552, 0.2566, 0.2580, 0.2590, 0.2600, 0.2610, 0.2620, 0.2630, 0.2640, 0.2650, 0.2660, 0.2670, 0.2680, 0.2690, 0.2700, 0.2710, 0.2720, 0.2730, 0.2740, 0.2750, 0.2760, 0.2770, 0.2780, 0.2786, 0.2792, 0.2798, 0.2804, 0.2810, 0.2814, 0.2818, 0.2822, 0.2826, 0.2830, 0.2836, 0.2842, 0.2848, 0.2854, 0.2860, 0.2870, 0.2880, 0.2890, 0.2900, 0.2910, 0.2920, 0.2930, 0.2940, 0.2950, 0.2960, 0.2972, 0.2984, 0.2996, 0.3008, 0.3020, 0.3042, 0.3064, 0.3086, 0.3108, 0.3130, 0.3154, 0.3178, 0.3202, 0.3226, 0.3250, 0.3276, 0.3302, 0.3328, 0.3354, 0.3380, 0.3406, 0.3432, 0.3458, 0.3484, 0.3510, 0.3536, 0.3562, 0.3588, 0.3614, 0.3640, 0.3664, 0.3688, 0.3712, 0.3736, 0.3760, 0.3786, 0.3812, 0.3838, 0.3864, 0.3890, 0.3914, 0.3938, 0.3962, 0.3986, 0.4010, 0.4034, 0.4058, 0.4082, 0.4106, 0.4130, 0.4154, 0.4178, 0.4202, 0.4226, 0.4250, 0.4272, 0.4294, 0.4316, 0.4338, 0.4360, 0.4382, 0.4404, 0.4426, 0.4448, 0.4470, 0.4492, 0.4514, 0.4536, 0.4558, 0.4580, 0.4602, 0.4624, 0.4646, 0.4668, 0.4690, 0.4706, 0.4722, 0.4738, 0.4754, 0.4770, 0.4786, 0.4802, 0.4818, 0.4834, 0.4850};
    private double[] tcs_7 = {0.3780, 0.3942, 0.4104, 0.4266, 0.4428, 0.4590, 0.4720, 0.4850, 0.4980, 0.5110, 0.5240, 0.5284, 0.5328, 0.5372, 0.5416, 0.5460, 0.5470, 0.5480, 0.5490, 0.5500, 0.5510, 0.5518, 0.5526, 0.5534, 0.5542, 0.5550, 0.5558, 0.5566, 0.5574, 0.5582, 0.5590, 0.5592, 0.5594, 0.5596, 0.5598, 0.5600, 0.5602, 0.5604, 0.5606, 0.5608, 0.5610, 0.5604, 0.5598, 0.5592, 0.5586, 0.5580, 0.5576, 0.5572, 0.5568, 0.5564, 0.5560, 0.5550, 0.5540, 0.5530, 0.5520, 0.5510, 0.5496, 0.5482, 0.5468, 0.5454, 0.5440, 0.5422, 0.5404, 0.5386, 0.5368, 0.5350, 0.5324, 0.5298, 0.5272, 0.5246, 0.5220, 0.5188, 0.5156, 0.5124, 0.5092, 0.5060, 0.5024, 0.4988, 0.4952, 0.4916, 0.4880, 0.4842, 0.4804, 0.4766, 0.4728, 0.4690, 0.4648, 0.4606, 0.4564, 0.4522, 0.4480, 0.4442, 0.4404, 0.4366, 0.4328, 0.4290, 0.4248, 0.4206, 0.4164, 0.4122, 0.4080, 0.4034, 0.3988, 0.3942, 0.3896, 0.3850, 0.3806, 0.3762, 0.3718, 0.3674, 0.3630, 0.3586, 0.3542, 0.3498, 0.3454, 0.3410, 0.3376, 0.3342, 0.3308, 0.3274, 0.3240, 0.3214, 0.3188, 0.3162, 0.3136, 0.3110, 0.3090, 0.3070, 0.3050, 0.3030, 0.3010, 0.2990, 0.2970, 0.2950, 0.2930, 0.2910, 0.2894, 0.2878, 0.2862, 0.2846, 0.2830, 0.2810, 0.2790, 0.2770, 0.2750, 0.2730, 0.2714, 0.2698, 0.2682, 0.2666, 0.2650, 0.2640, 0.2630, 0.2620, 0.2610, 0.2600, 0.2594, 0.2588, 0.2582, 0.2576, 0.2570, 0.2570, 0.2570, 0.2570, 0.2570, 0.2570, 0.2574, 0.2578, 0.2582, 0.2586, 0.2590, 0.2592, 0.2594, 0.2596, 0.2598, 0.2600, 0.2600, 0.2600, 0.2600, 0.2600, 0.2600, 0.2596, 0.2592, 0.2588, 0.2584, 0.2580, 0.2576, 0.2572, 0.2568, 0.2564, 0.2560, 0.2556, 0.2552, 0.2548, 0.2544, 0.2540, 0.2540, 0.2540, 0.2540, 0.2540, 0.2540, 0.2550, 0.2560, 0.2570, 0.2580, 0.2590, 0.2612, 0.2634, 0.2656, 0.2678, 0.2700, 0.2728, 0.2756, 0.2784, 0.2812, 0.2840, 0.2876, 0.2912, 0.2948, 0.2984, 0.3020, 0.3064, 0.3108, 0.3152, 0.3196, 0.3240, 0.3280, 0.3320, 0.3360, 0.3400, 0.3440, 0.3476, 0.3512, 0.3548, 0.3584, 0.3620, 0.3650, 0.3680, 0.3710, 0.3740, 0.3770, 0.3794, 0.3818, 0.3842, 0.3866, 0.3890, 0.3912, 0.3934, 0.3956, 0.3978, 0.4000, 0.4020, 0.4040, 0.4060, 0.4080, 0.4100, 0.4120, 0.4140, 0.4160, 0.4180, 0.4200, 0.4218, 0.4236, 0.4254, 0.4272, 0.4290, 0.4308, 0.4326, 0.4344, 0.4362, 0.4380, 0.4394, 0.4408, 0.4422, 0.4436, 0.4450, 0.4464, 0.4478, 0.4492, 0.4506, 0.4520, 0.4530, 0.4540, 0.4550, 0.4560, 0.4570, 0.4580, 0.4590, 0.4600, 0.4610, 0.4620, 0.4628, 0.4636, 0.4644, 0.4652, 0.4660, 0.4664, 0.4668, 0.4672, 0.4676, 0.4680, 0.4684, 0.4688, 0.4692, 0.4696, 0.4700, 0.4706, 0.4712, 0.4718, 0.4724, 0.4730, 0.4738, 0.4746, 0.4754, 0.4762, 0.4770, 0.4782, 0.4794, 0.4806, 0.4818, 0.4830, 0.4842, 0.4854, 0.4866, 0.4878, 0.4890, 0.4904, 0.4918, 0.4932, 0.4946, 0.4960, 0.4974, 0.4988, 0.5002, 0.5016, 0.5030, 0.5046, 0.5062, 0.5078, 0.5094, 0.5110, 0.5124, 0.5138, 0.5152, 0.5166, 0.5180, 0.5194, 0.5208, 0.5222, 0.5236, 0.5250, 0.5264, 0.5278, 0.5292, 0.5306, 0.5320, 0.5334, 0.5348, 0.5362, 0.5376, 0.5390, 0.5404, 0.5418, 0.5432, 0.5446, 0.5460, 0.5474, 0.5488, 0.5502, 0.5516, 0.5530, 0.5542, 0.5554, 0.5566, 0.5578, 0.5590, 0.5602, 0.5614, 0.5626, 0.5638, 0.5650, 0.5660, 0.5670, 0.5680, 0.5690, 0.5700, 0.5710, 0.5720, 0.5730, 0.5740, 0.5750, 0.5756, 0.5762, 0.5768, 0.5774, 0.5780, 0.5786, 0.5792, 0.5798, 0.5804, 0.5810};
    private double[] tcs_8 = {0.1040, 0.1090, 0.1140, 0.1190, 0.1240, 0.1290, 0.1372, 0.1454, 0.1536, 0.1618, 0.1700, 0.1840, 0.1980, 0.2120, 0.2260, 0.2400, 0.2558, 0.2716, 0.2874, 0.3032, 0.3190, 0.3384, 0.3578, 0.3772, 0.3966, 0.4160, 0.4252, 0.4344, 0.4436, 0.4528, 0.4620, 0.4660, 0.4700, 0.4740, 0.4780, 0.4820, 0.4836, 0.4852, 0.4868, 0.4884, 0.4900, 0.4896, 0.4892, 0.4888, 0.4884, 0.4880, 0.4868, 0.4856, 0.4844, 0.4832, 0.4820, 0.4802, 0.4784, 0.4766, 0.4748, 0.4730, 0.4708, 0.4686, 0.4664, 0.4642, 0.4620, 0.4596, 0.4572, 0.4548, 0.4524, 0.4500, 0.4478, 0.4456, 0.4434, 0.4412, 0.4390, 0.4364, 0.4338, 0.4312, 0.4286, 0.4260, 0.4234, 0.4208, 0.4182, 0.4156, 0.4130, 0.4098, 0.4066, 0.4034, 0.4002, 0.3970, 0.3940, 0.3910, 0.3880, 0.3850, 0.3820, 0.3788, 0.3756, 0.3724, 0.3692, 0.3660, 0.3632, 0.3604, 0.3576, 0.3548, 0.3520, 0.3490, 0.3460, 0.3430, 0.3400, 0.3370, 0.3346, 0.3322, 0.3298, 0.3274, 0.3250, 0.3220, 0.3190, 0.3160, 0.3130, 0.3100, 0.3078, 0.3056, 0.3034, 0.3012, 0.2990, 0.2970, 0.2950, 0.2930, 0.2910, 0.2890, 0.2878, 0.2866, 0.2854, 0.2842, 0.2830, 0.2816, 0.2802, 0.2788, 0.2774, 0.2760, 0.2748, 0.2736, 0.2724, 0.2712, 0.2700, 0.2684, 0.2668, 0.2652, 0.2636, 0.2620, 0.2608, 0.2596, 0.2584, 0.2572, 0.2560, 0.2550, 0.2540, 0.2530, 0.2520, 0.2510, 0.2508, 0.2506, 0.2504, 0.2502, 0.2500, 0.2502, 0.2504, 0.2506, 0.2508, 0.2510, 0.2516, 0.2522, 0.2528, 0.2534, 0.2540, 0.2548, 0.2556, 0.2564, 0.2572, 0.2580, 0.2592, 0.2604, 0.2616, 0.2628, 0.2640, 0.2650, 0.2660, 0.2670, 0.2680, 0.2690, 0.2696, 0.2702, 0.2708, 0.2714, 0.2720, 0.2724, 0.2728, 0.2732, 0.2736, 0.2740, 0.2748, 0.2756, 0.2764, 0.2772, 0.2780, 0.2792, 0.2804, 0.2816, 0.2828, 0.2840, 0.2862, 0.2884, 0.2906, 0.2928, 0.2950, 0.2992, 0.3034, 0.3076, 0.3118, 0.3160, 0.3224, 0.3288, 0.3352, 0.3416, 0.3480, 0.3552, 0.3624, 0.3696, 0.3768, 0.3840, 0.3940, 0.4040, 0.4140, 0.4240, 0.4340, 0.4436, 0.4532, 0.4628, 0.4724, 0.4820, 0.4912, 0.5004, 0.5096, 0.5188, 0.5280, 0.5360, 0.5440, 0.5520, 0.5600, 0.5680, 0.5752, 0.5824, 0.5896, 0.5968, 0.6040, 0.6090, 0.6140, 0.6190, 0.6240, 0.6290, 0.6328, 0.6366, 0.6404, 0.6442, 0.6480, 0.6510, 0.6540, 0.6570, 0.6600, 0.6630, 0.6656, 0.6682, 0.6708, 0.6734, 0.6760, 0.6778, 0.6796, 0.6814, 0.6832, 0.6850, 0.6866, 0.6882, 0.6898, 0.6914, 0.6930, 0.6944, 0.6958, 0.6972, 0.6986, 0.7000, 0.7010, 0.7020, 0.7030, 0.7040, 0.7050, 0.7058, 0.7066, 0.7074, 0.7082, 0.7090, 0.7096, 0.7102, 0.7108, 0.7114, 0.7120, 0.7126, 0.7132, 0.7138, 0.7144, 0.7150, 0.7154, 0.7158, 0.7162, 0.7166, 0.7170, 0.7174, 0.7178, 0.7182, 0.7186, 0.7190, 0.7194, 0.7198, 0.7202, 0.7206, 0.7210, 0.7208, 0.7206, 0.7204, 0.7202, 0.7200, 0.7198, 0.7196, 0.7194, 0.7192, 0.7190, 0.7196, 0.7202, 0.7208, 0.7214, 0.7220, 0.7226, 0.7232, 0.7238, 0.7244, 0.7250, 0.7254, 0.7258, 0.7262, 0.7266, 0.7270, 0.7274, 0.7278, 0.7282, 0.7286, 0.7290, 0.7292, 0.7294, 0.7296, 0.7298, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300};
    private double[] tcs_9 = {0.0660, 0.0652, 0.0644, 0.0636, 0.0628, 0.0620, 0.0612, 0.0604, 0.0596, 0.0588, 0.0580, 0.0574, 0.0568, 0.0562, 0.0556, 0.0550, 0.0544, 0.0538, 0.0532, 0.0526, 0.0520, 0.0520, 0.0520, 0.0520, 0.0520, 0.0520, 0.0518, 0.0516, 0.0514, 0.0512, 0.0510, 0.0508, 0.0506, 0.0504, 0.0502, 0.0500, 0.0500, 0.0500, 0.0500, 0.0500, 0.0500, 0.0498, 0.0496, 0.0494, 0.0492, 0.0490, 0.0488, 0.0486, 0.0484, 0.0482, 0.0480, 0.0478, 0.0476, 0.0474, 0.0472, 0.0470, 0.0468, 0.0466, 0.0464, 0.0462, 0.0460, 0.0456, 0.0452, 0.0448, 0.0444, 0.0440, 0.0436, 0.0432, 0.0428, 0.0424, 0.0420, 0.0418, 0.0416, 0.0414, 0.0412, 0.0410, 0.0404, 0.0398, 0.0392, 0.0386, 0.0380, 0.0374, 0.0368, 0.0362, 0.0356, 0.0350, 0.0346, 0.0342, 0.0338, 0.0334, 0.0330, 0.0326, 0.0322, 0.0318, 0.0314, 0.0310, 0.0308, 0.0306, 0.0304, 0.0302, 0.0300, 0.0298, 0.0296, 0.0294, 0.0292, 0.0290, 0.0288, 0.0286, 0.0284, 0.0282, 0.0280, 0.0280, 0.0280, 0.0280, 0.0280, 0.0280, 0.0280, 0.0280, 0.0280, 0.0280, 0.0280, 0.0282, 0.0284, 0.0286, 0.0288, 0.0290, 0.0292, 0.0294, 0.0296, 0.0298, 0.0300, 0.0300, 0.0300, 0.0300, 0.0300, 0.0300, 0.0302, 0.0304, 0.0306, 0.0308, 0.0310, 0.0310, 0.0310, 0.0310, 0.0310, 0.0310, 0.0312, 0.0314, 0.0316, 0.0318, 0.0320, 0.0320, 0.0320, 0.0320, 0.0320, 0.0320, 0.0322, 0.0324, 0.0326, 0.0328, 0.0330, 0.0332, 0.0334, 0.0336, 0.0338, 0.0340, 0.0342, 0.0344, 0.0346, 0.0348, 0.0350, 0.0354, 0.0358, 0.0362, 0.0366, 0.0370, 0.0378, 0.0386, 0.0394, 0.0402, 0.0410, 0.0416, 0.0422, 0.0428, 0.0434, 0.0440, 0.0448, 0.0456, 0.0464, 0.0472, 0.0480, 0.0488, 0.0496, 0.0504, 0.0512, 0.0520, 0.0536, 0.0552, 0.0568, 0.0584, 0.0600, 0.0632, 0.0664, 0.0696, 0.0728, 0.0760, 0.0812, 0.0864, 0.0916, 0.0968, 0.1020, 0.1088, 0.1156, 0.1224, 0.1292, 0.1360, 0.1468, 0.1576, 0.1684, 0.1792, 0.1900, 0.2032, 0.2164, 0.2296, 0.2428, 0.2560, 0.2720, 0.2880, 0.3040, 0.3200, 0.3360, 0.3524, 0.3688, 0.3852, 0.4016, 0.4180, 0.4354, 0.4528, 0.4702, 0.4876, 0.5050, 0.5202, 0.5354, 0.5506, 0.5658, 0.5810, 0.5930, 0.6050, 0.6170, 0.6290, 0.6410, 0.6492, 0.6574, 0.6656, 0.6738, 0.6820, 0.6890, 0.6960, 0.7030, 0.7100, 0.7170, 0.7216, 0.7262, 0.7308, 0.7354, 0.7400, 0.7436, 0.7472, 0.7508, 0.7544, 0.7580, 0.7604, 0.7628, 0.7652, 0.7676, 0.7700, 0.7722, 0.7744, 0.7766, 0.7788, 0.7810, 0.7828, 0.7846, 0.7864, 0.7882, 0.7900, 0.7914, 0.7928, 0.7942, 0.7956, 0.7970, 0.7982, 0.7994, 0.8006, 0.8018, 0.8030, 0.8042, 0.8054, 0.8066, 0.8078, 0.8090, 0.8100, 0.8110, 0.8120, 0.8130, 0.8140, 0.8150, 0.8160, 0.8170, 0.8180, 0.8190, 0.8200, 0.8210, 0.8220, 0.8230, 0.8240, 0.8248, 0.8256, 0.8264, 0.8272, 0.8280, 0.8284, 0.8288, 0.8292, 0.8296, 0.8300, 0.8302, 0.8304, 0.8306, 0.8308, 0.8310, 0.8314, 0.8318, 0.8322, 0.8326, 0.8330, 0.8334, 0.8338, 0.8342, 0.8346, 0.8350, 0.8352, 0.8354, 0.8356, 0.8358, 0.8360, 0.8360, 0.8360, 0.8360, 0.8360, 0.8360, 0.8362, 0.8364, 0.8366, 0.8368, 0.8370, 0.8372, 0.8374, 0.8376, 0.8378, 0.8380, 0.8382, 0.8384, 0.8386, 0.8388, 0.8390, 0.8390, 0.8390, 0.8390, 0.8390, 0.8390, 0.8390, 0.8390, 0.8390, 0.8390, 0.8390, 0.8390, 0.8390, 0.8390, 0.8390, 0.8390, 0.8390, 0.8390, 0.8390, 0.8390, 0.8390, 0.8390, 0.8390, 0.8390, 0.8390, 0.8390, 0.8390, 0.8390, 0.8390, 0.8390, 0.8390, 0.8390, 0.8390, 0.8390, 0.8390, 0.8390};
    private double[] tcs_10 = {0.0500, 0.0508, 0.0516, 0.0524, 0.0532, 0.0540, 0.0550, 0.0560, 0.0570, 0.0580, 0.0590, 0.0598, 0.0606, 0.0614, 0.0622, 0.0630, 0.0636, 0.0642, 0.0648, 0.0654, 0.0660, 0.0662, 0.0664, 0.0666, 0.0668, 0.0670, 0.0672, 0.0674, 0.0676, 0.0678, 0.0680, 0.0682, 0.0684, 0.0686, 0.0688, 0.0690, 0.0690, 0.0690, 0.0690, 0.0690, 0.0690, 0.0692, 0.0694, 0.0696, 0.0698, 0.0700, 0.0704, 0.0708, 0.0712, 0.0716, 0.0720, 0.0722, 0.0724, 0.0726, 0.0728, 0.0730, 0.0736, 0.0742, 0.0748, 0.0754, 0.0760, 0.0764, 0.0768, 0.0772, 0.0776, 0.0780, 0.0790, 0.0800, 0.0810, 0.0820, 0.0830, 0.0840, 0.0850, 0.0860, 0.0870, 0.0880, 0.0894, 0.0908, 0.0922, 0.0936, 0.0950, 0.0966, 0.0982, 0.0998, 0.1014, 0.1030, 0.1050, 0.1070, 0.1090, 0.1110, 0.1130, 0.1154, 0.1178, 0.1202, 0.1226, 0.1250, 0.1284, 0.1318, 0.1352, 0.1386, 0.1420, 0.1460, 0.1500, 0.1540, 0.1580, 0.1620, 0.1674, 0.1728, 0.1782, 0.1836, 0.1890, 0.1950, 0.2010, 0.2070, 0.2130, 0.2190, 0.2276, 0.2362, 0.2448, 0.2534, 0.2620, 0.2706, 0.2792, 0.2878, 0.2964, 0.3050, 0.3170, 0.3290, 0.3410, 0.3530, 0.3650, 0.3752, 0.3854, 0.3956, 0.4058, 0.4160, 0.4258, 0.4356, 0.4454, 0.4552, 0.4650, 0.4738, 0.4826, 0.4914, 0.5002, 0.5090, 0.5164, 0.5238, 0.5312, 0.5386, 0.5460, 0.5530, 0.5600, 0.5670, 0.5740, 0.5810, 0.5868, 0.5926, 0.5984, 0.6042, 0.6100, 0.6148, 0.6196, 0.6244, 0.6292, 0.6340, 0.6378, 0.6416, 0.6454, 0.6492, 0.6530, 0.6556, 0.6582, 0.6608, 0.6634, 0.6660, 0.6678, 0.6696, 0.6714, 0.6732, 0.6750, 0.6774, 0.6798, 0.6822, 0.6846, 0.6870, 0.6882, 0.6894, 0.6906, 0.6918, 0.6930, 0.6940, 0.6950, 0.6960, 0.6970, 0.6980, 0.6986, 0.6992, 0.6998, 0.7004, 0.7010, 0.7016, 0.7022, 0.7028, 0.7034, 0.7040, 0.7042, 0.7044, 0.7046, 0.7048, 0.7050, 0.7050, 0.7050, 0.7050, 0.7050, 0.7050, 0.7052, 0.7054, 0.7056, 0.7058, 0.7060, 0.7062, 0.7064, 0.7066, 0.7068, 0.7070, 0.7070, 0.7070, 0.7070, 0.7070, 0.7070, 0.7070, 0.7070, 0.7070, 0.7070, 0.7070, 0.7072, 0.7074, 0.7076, 0.7078, 0.7080, 0.7080, 0.7080, 0.7080, 0.7080, 0.7080, 0.7084, 0.7088, 0.7092, 0.7096, 0.7100, 0.7102, 0.7104, 0.7106, 0.7108, 0.7110, 0.7112, 0.7114, 0.7116, 0.7118, 0.7120, 0.7124, 0.7128, 0.7132, 0.7136, 0.7140, 0.7144, 0.7148, 0.7152, 0.7156, 0.7160, 0.7164, 0.7168, 0.7172, 0.7176, 0.7180, 0.7184, 0.7188, 0.7192, 0.7196, 0.7200, 0.7204, 0.7208, 0.7212, 0.7216, 0.7220, 0.7226, 0.7232, 0.7238, 0.7244, 0.7250, 0.7258, 0.7266, 0.7274, 0.7282, 0.7290, 0.7294, 0.7298, 0.7302, 0.7306, 0.7310, 0.7318, 0.7326, 0.7334, 0.7342, 0.7350, 0.7358, 0.7366, 0.7374, 0.7382, 0.7390, 0.7402, 0.7414, 0.7426, 0.7438, 0.7450, 0.7452, 0.7454, 0.7456, 0.7458, 0.7460, 0.7464, 0.7468, 0.7472, 0.7476, 0.7480, 0.7482, 0.7484, 0.7486, 0.7488, 0.7490, 0.7494, 0.7498, 0.7502, 0.7506, 0.7510, 0.7514, 0.7518, 0.7522, 0.7526, 0.7530, 0.7532, 0.7534, 0.7536, 0.7538, 0.7540, 0.7542, 0.7544, 0.7546, 0.7548, 0.7550, 0.7550, 0.7550, 0.7550, 0.7550, 0.7550, 0.7550, 0.7550, 0.7550, 0.7550, 0.7550, 0.7550, 0.7550, 0.7550, 0.7550, 0.7550, 0.7552, 0.7554, 0.7556, 0.7558, 0.7560, 0.7562, 0.7564, 0.7566, 0.7568, 0.7570, 0.7572, 0.7574, 0.7576, 0.7578, 0.7580, 0.7582, 0.7584, 0.7586, 0.7588, 0.7590, 0.7590, 0.7590, 0.7590, 0.7590, 0.7590, 0.7590, 0.7590, 0.7590, 0.7590, 0.7590, 0.7590, 0.7590, 0.7590, 0.7590, 0.7590};
    private double[] tcs_11 = {0.1110, 0.1130, 0.1150, 0.1170, 0.1190, 0.1210, 0.1222, 0.1234, 0.1246, 0.1258, 0.1270, 0.1274, 0.1278, 0.1282, 0.1286, 0.1290, 0.1286, 0.1282, 0.1278, 0.1274, 0.1270, 0.1258, 0.1246, 0.1234, 0.1222, 0.1210, 0.1200, 0.1190, 0.1180, 0.1170, 0.1160, 0.1152, 0.1144, 0.1136, 0.1128, 0.1120, 0.1112, 0.1104, 0.1096, 0.1088, 0.1080, 0.1074, 0.1068, 0.1062, 0.1056, 0.1050, 0.1048, 0.1046, 0.1044, 0.1042, 0.1040, 0.1040, 0.1040, 0.1040, 0.1040, 0.1040, 0.1042, 0.1044, 0.1046, 0.1048, 0.1050, 0.1052, 0.1054, 0.1056, 0.1058, 0.1060, 0.1068, 0.1076, 0.1084, 0.1092, 0.1100, 0.1110, 0.1120, 0.1130, 0.1140, 0.1150, 0.1166, 0.1182, 0.1198, 0.1214, 0.1230, 0.1252, 0.1274, 0.1296, 0.1318, 0.1340, 0.1368, 0.1396, 0.1424, 0.1452, 0.1480, 0.1518, 0.1556, 0.1594, 0.1632, 0.1670, 0.1720, 0.1770, 0.1820, 0.1870, 0.1920, 0.1974, 0.2028, 0.2082, 0.2136, 0.2190, 0.2254, 0.2318, 0.2382, 0.2446, 0.2510, 0.2590, 0.2670, 0.2750, 0.2830, 0.2910, 0.2978, 0.3046, 0.3114, 0.3182, 0.3250, 0.3294, 0.3338, 0.3382, 0.3426, 0.3470, 0.3488, 0.3506, 0.3524, 0.3542, 0.3560, 0.3554, 0.3548, 0.3542, 0.3536, 0.3530, 0.3516, 0.3502, 0.3488, 0.3474, 0.3460, 0.3434, 0.3408, 0.3382, 0.3356, 0.3330, 0.3292, 0.3254, 0.3216, 0.3178, 0.3140, 0.3100, 0.3060, 0.3020, 0.2980, 0.2940, 0.2894, 0.2848, 0.2802, 0.2756, 0.2710, 0.2664, 0.2618, 0.2572, 0.2526, 0.2480, 0.2438, 0.2396, 0.2354, 0.2312, 0.2270, 0.2228, 0.2186, 0.2144, 0.2102, 0.2060, 0.2024, 0.1988, 0.1952, 0.1916, 0.1880, 0.1844, 0.1808, 0.1772, 0.1736, 0.1700, 0.1666, 0.1632, 0.1598, 0.1564, 0.1530, 0.1500, 0.1470, 0.1440, 0.1410, 0.1380, 0.1354, 0.1328, 0.1302, 0.1276, 0.1250, 0.1228, 0.1206, 0.1184, 0.1162, 0.1140, 0.1124, 0.1108, 0.1092, 0.1076, 0.1060, 0.1048, 0.1036, 0.1024, 0.1012, 0.1000, 0.0992, 0.0984, 0.0976, 0.0968, 0.0960, 0.0952, 0.0944, 0.0936, 0.0928, 0.0920, 0.0916, 0.0912, 0.0908, 0.0904, 0.0900, 0.0894, 0.0888, 0.0882, 0.0876, 0.0870, 0.0866, 0.0862, 0.0858, 0.0854, 0.0850, 0.0844, 0.0838, 0.0832, 0.0826, 0.0820, 0.0816, 0.0812, 0.0808, 0.0804, 0.0800, 0.0798, 0.0796, 0.0794, 0.0792, 0.0790, 0.0788, 0.0786, 0.0784, 0.0782, 0.0780, 0.0780, 0.0780, 0.0780, 0.0780, 0.0780, 0.0780, 0.0780, 0.0780, 0.0780, 0.0780, 0.0780, 0.0780, 0.0780, 0.0780, 0.0780, 0.0786, 0.0792, 0.0798, 0.0804, 0.0810, 0.0814, 0.0818, 0.0822, 0.0826, 0.0830, 0.0836, 0.0842, 0.0848, 0.0854, 0.0860, 0.0874, 0.0888, 0.0902, 0.0916, 0.0930, 0.0948, 0.0966, 0.0984, 0.1002, 0.1020, 0.1040, 0.1060, 0.1080, 0.1100, 0.1120, 0.1146, 0.1172, 0.1198, 0.1224, 0.1250, 0.1282, 0.1314, 0.1346, 0.1378, 0.1410, 0.1450, 0.1490, 0.1530, 0.1570, 0.1610, 0.1652, 0.1694, 0.1736, 0.1778, 0.1820, 0.1862, 0.1904, 0.1946, 0.1988, 0.2030, 0.2070, 0.2110, 0.2150, 0.2190, 0.2230, 0.2268, 0.2306, 0.2344, 0.2382, 0.2420, 0.2450, 0.2480, 0.2510, 0.2540, 0.2570, 0.2596, 0.2622, 0.2648, 0.2674, 0.2700, 0.2724, 0.2748, 0.2772, 0.2796, 0.2820, 0.2840, 0.2860, 0.2880, 0.2900, 0.2920, 0.2940, 0.2960, 0.2980, 0.3000, 0.3020, 0.3036, 0.3052, 0.3068, 0.3084, 0.3100, 0.3108, 0.3116, 0.3124, 0.3132, 0.3140, 0.3146, 0.3152, 0.3158, 0.3164, 0.3170, 0.3182, 0.3194, 0.3206, 0.3218, 0.3230, 0.3244, 0.3258, 0.3272, 0.3286, 0.3300, 0.3308, 0.3316, 0.3324, 0.3332, 0.3340, 0.3348, 0.3356, 0.3364, 0.3372, 0.3380};
    private double[] tcs_12 = {0.1200, 0.1166, 0.1132, 0.1098, 0.1064, 0.1030, 0.1004, 0.0978, 0.0952, 0.0926, 0.0900, 0.0884, 0.0868, 0.0852, 0.0836, 0.0820, 0.0808, 0.0796, 0.0784, 0.0772, 0.0760, 0.0744, 0.0728, 0.0712, 0.0696, 0.0680, 0.0672, 0.0664, 0.0656, 0.0648, 0.0640, 0.0642, 0.0644, 0.0646, 0.0648, 0.0650, 0.0670, 0.0690, 0.0710, 0.0730, 0.0750, 0.0786, 0.0822, 0.0858, 0.0894, 0.0930, 0.0990, 0.1050, 0.1110, 0.1170, 0.1230, 0.1304, 0.1378, 0.1452, 0.1526, 0.1600, 0.1694, 0.1788, 0.1882, 0.1976, 0.2070, 0.2168, 0.2266, 0.2364, 0.2462, 0.2560, 0.2648, 0.2736, 0.2824, 0.2912, 0.3000, 0.3062, 0.3124, 0.3186, 0.3248, 0.3310, 0.3340, 0.3370, 0.3400, 0.3430, 0.3460, 0.3462, 0.3464, 0.3466, 0.3468, 0.3470, 0.3458, 0.3446, 0.3434, 0.3422, 0.3410, 0.3384, 0.3358, 0.3332, 0.3306, 0.3280, 0.3238, 0.3196, 0.3154, 0.3112, 0.3070, 0.3020, 0.2970, 0.2920, 0.2870, 0.2820, 0.2770, 0.2720, 0.2670, 0.2620, 0.2570, 0.2516, 0.2462, 0.2408, 0.2354, 0.2300, 0.2248, 0.2196, 0.2144, 0.2092, 0.2040, 0.1988, 0.1936, 0.1884, 0.1832, 0.1780, 0.1732, 0.1684, 0.1636, 0.1588, 0.1540, 0.1490, 0.1440, 0.1390, 0.1340, 0.1290, 0.1250, 0.1210, 0.1170, 0.1130, 0.1090, 0.1052, 0.1014, 0.0976, 0.0938, 0.0900, 0.0870, 0.0840, 0.0810, 0.0780, 0.0750, 0.0724, 0.0698, 0.0672, 0.0646, 0.0620, 0.0598, 0.0576, 0.0554, 0.0532, 0.0510, 0.0490, 0.0470, 0.0450, 0.0430, 0.0410, 0.0398, 0.0386, 0.0374, 0.0362, 0.0350, 0.0338, 0.0326, 0.0314, 0.0302, 0.0290, 0.0282, 0.0274, 0.0266, 0.0258, 0.0250, 0.0244, 0.0238, 0.0232, 0.0226, 0.0220, 0.0214, 0.0208, 0.0202, 0.0196, 0.0190, 0.0186, 0.0182, 0.0178, 0.0174, 0.0170, 0.0170, 0.0170, 0.0170, 0.0170, 0.0170, 0.0170, 0.0170, 0.0170, 0.0170, 0.0170, 0.0168, 0.0166, 0.0164, 0.0162, 0.0160, 0.0160, 0.0160, 0.0160, 0.0160, 0.0160, 0.0160, 0.0160, 0.0160, 0.0160, 0.0160, 0.0160, 0.0160, 0.0160, 0.0160, 0.0160, 0.0160, 0.0160, 0.0160, 0.0160, 0.0160, 0.0160, 0.0160, 0.0160, 0.0160, 0.0160, 0.0160, 0.0160, 0.0160, 0.0160, 0.0160, 0.0160, 0.0160, 0.0160, 0.0160, 0.0160, 0.0164, 0.0168, 0.0172, 0.0176, 0.0180, 0.0180, 0.0180, 0.0180, 0.0180, 0.0180, 0.0180, 0.0180, 0.0180, 0.0180, 0.0180, 0.0180, 0.0180, 0.0180, 0.0180, 0.0180, 0.0182, 0.0184, 0.0186, 0.0188, 0.0190, 0.0192, 0.0194, 0.0196, 0.0198, 0.0200, 0.0206, 0.0212, 0.0218, 0.0224, 0.0230, 0.0232, 0.0234, 0.0236, 0.0238, 0.0240, 0.0244, 0.0248, 0.0252, 0.0256, 0.0260, 0.0268, 0.0276, 0.0284, 0.0292, 0.0300, 0.0310, 0.0320, 0.0330, 0.0340, 0.0350, 0.0366, 0.0382, 0.0398, 0.0414, 0.0430, 0.0456, 0.0482, 0.0508, 0.0534, 0.0560, 0.0596, 0.0632, 0.0668, 0.0704, 0.0740, 0.0786, 0.0832, 0.0878, 0.0924, 0.0970, 0.1032, 0.1094, 0.1156, 0.1218, 0.1280, 0.1356, 0.1432, 0.1508, 0.1584, 0.1660, 0.1748, 0.1836, 0.1924, 0.2012, 0.2100, 0.2194, 0.2288, 0.2382, 0.2476, 0.2570, 0.2666, 0.2762, 0.2858, 0.2954, 0.3050, 0.3148, 0.3246, 0.3344, 0.3442, 0.3540, 0.3634, 0.3728, 0.3822, 0.3916, 0.4010, 0.4100, 0.4190, 0.4280, 0.4370, 0.4460, 0.4538, 0.4616, 0.4694, 0.4772, 0.4850, 0.4920, 0.4990, 0.5060, 0.5130, 0.5200, 0.5262, 0.5324, 0.5386, 0.5448, 0.5510, 0.5562, 0.5614, 0.5666, 0.5718, 0.5770, 0.5814, 0.5858, 0.5902, 0.5946, 0.5990, 0.6028, 0.6066, 0.6104, 0.6142, 0.6180, 0.6210, 0.6240, 0.6270, 0.6300, 0.6330, 0.6354, 0.6378, 0.6402, 0.6426, 0.6450};
    private double[] tcs_13 = {0.1040, 0.1086, 0.1132, 0.1178, 0.1224, 0.1270, 0.1338, 0.1406, 0.1474, 0.1542, 0.1610, 0.1710, 0.1810, 0.1910, 0.2010, 0.2110, 0.2216, 0.2322, 0.2428, 0.2534, 0.2640, 0.2738, 0.2836, 0.2934, 0.3032, 0.3130, 0.3186, 0.3242, 0.3298, 0.3354, 0.3410, 0.3432, 0.3454, 0.3476, 0.3498, 0.3520, 0.3534, 0.3548, 0.3562, 0.3576, 0.3590, 0.3594, 0.3598, 0.3602, 0.3606, 0.3610, 0.3616, 0.3622, 0.3628, 0.3634, 0.3640, 0.3642, 0.3644, 0.3646, 0.3648, 0.3650, 0.3654, 0.3658, 0.3662, 0.3666, 0.3670, 0.3674, 0.3678, 0.3682, 0.3686, 0.3690, 0.3696, 0.3702, 0.3708, 0.3714, 0.3720, 0.3724, 0.3728, 0.3732, 0.3736, 0.3740, 0.3744, 0.3748, 0.3752, 0.3756, 0.3760, 0.3766, 0.3772, 0.3778, 0.3784, 0.3790, 0.3800, 0.3810, 0.3820, 0.3830, 0.3840, 0.3850, 0.3860, 0.3870, 0.3880, 0.3890, 0.3906, 0.3922, 0.3938, 0.3954, 0.3970, 0.3986, 0.4002, 0.4018, 0.4034, 0.4050, 0.4072, 0.4094, 0.4116, 0.4138, 0.4160, 0.4186, 0.4212, 0.4238, 0.4264, 0.4290, 0.4318, 0.4346, 0.4374, 0.4402, 0.4430, 0.4452, 0.4474, 0.4496, 0.4518, 0.4540, 0.4554, 0.4568, 0.4582, 0.4596, 0.4610, 0.4620, 0.4630, 0.4640, 0.4650, 0.4660, 0.4666, 0.4672, 0.4678, 0.4684, 0.4690, 0.4694, 0.4698, 0.4702, 0.4706, 0.4710, 0.4716, 0.4722, 0.4728, 0.4734, 0.4740, 0.4744, 0.4748, 0.4752, 0.4756, 0.4760, 0.4774, 0.4788, 0.4802, 0.4816, 0.4830, 0.4844, 0.4858, 0.4872, 0.4886, 0.4900, 0.4932, 0.4964, 0.4996, 0.5028, 0.5060, 0.5100, 0.5140, 0.5180, 0.5220, 0.5260, 0.5314, 0.5368, 0.5422, 0.5476, 0.5530, 0.5608, 0.5686, 0.5764, 0.5842, 0.5920, 0.5972, 0.6024, 0.6076, 0.6128, 0.6180, 0.6246, 0.6312, 0.6378, 0.6444, 0.6510, 0.6568, 0.6626, 0.6684, 0.6742, 0.6800, 0.6842, 0.6884, 0.6926, 0.6968, 0.7010, 0.7042, 0.7074, 0.7106, 0.7138, 0.7170, 0.7194, 0.7218, 0.7242, 0.7266, 0.7290, 0.7304, 0.7318, 0.7332, 0.7346, 0.7360, 0.7372, 0.7384, 0.7396, 0.7408, 0.7420, 0.7426, 0.7432, 0.7438, 0.7444, 0.7450, 0.7454, 0.7458, 0.7462, 0.7466, 0.7470, 0.7472, 0.7474, 0.7476, 0.7478, 0.7480, 0.7480, 0.7480, 0.7480, 0.7480, 0.7480, 0.7480, 0.7480, 0.7480, 0.7480, 0.7480, 0.7480, 0.7480, 0.7480, 0.7480, 0.7480, 0.7480, 0.7480, 0.7480, 0.7480, 0.7480, 0.7474, 0.7468, 0.7462, 0.7456, 0.7450, 0.7456, 0.7462, 0.7468, 0.7474, 0.7480, 0.7480, 0.7480, 0.7480, 0.7480, 0.7480, 0.7478, 0.7476, 0.7474, 0.7472, 0.7470, 0.7470, 0.7470, 0.7470, 0.7470, 0.7470, 0.7470, 0.7470, 0.7470, 0.7470, 0.7470, 0.7470, 0.7470, 0.7470, 0.7470, 0.7470, 0.7470, 0.7470, 0.7470, 0.7470, 0.7470, 0.7470, 0.7470, 0.7470, 0.7470, 0.7470, 0.7470, 0.7470, 0.7470, 0.7470, 0.7470, 0.7468, 0.7466, 0.7464, 0.7462, 0.7460, 0.7460, 0.7460, 0.7460, 0.7460, 0.7460, 0.7460, 0.7460, 0.7460, 0.7460, 0.7460, 0.7458, 0.7456, 0.7454, 0.7452, 0.7450, 0.7448, 0.7446, 0.7444, 0.7442, 0.7440, 0.7438, 0.7436, 0.7434, 0.7432, 0.7430, 0.7432, 0.7434, 0.7436, 0.7438, 0.7440, 0.7442, 0.7444, 0.7446, 0.7448, 0.7450, 0.7456, 0.7462, 0.7468, 0.7474, 0.7480, 0.7484, 0.7488, 0.7492, 0.7496, 0.7500, 0.7500, 0.7500, 0.7500, 0.7500, 0.7500, 0.7498, 0.7496, 0.7494, 0.7492, 0.7490, 0.7488, 0.7486, 0.7484, 0.7482, 0.7480, 0.7480, 0.7480, 0.7480, 0.7480, 0.7480, 0.7478, 0.7476, 0.7474, 0.7472, 0.7470, 0.7470, 0.7470, 0.7470, 0.7470, 0.7470, 0.7470, 0.7470, 0.7470, 0.7470, 0.7470, 0.7470, 0.7470, 0.7470, 0.7470, 0.7470};
    private double[] tcs_14 = {0.0360, 0.0360, 0.0360, 0.0360, 0.0360, 0.0360, 0.0362, 0.0364, 0.0366, 0.0368, 0.0370, 0.0372, 0.0374, 0.0376, 0.0378, 0.0380, 0.0382, 0.0384, 0.0386, 0.0388, 0.0390, 0.0390, 0.0390, 0.0390, 0.0390, 0.0390, 0.0392, 0.0394, 0.0396, 0.0398, 0.0400, 0.0402, 0.0404, 0.0406, 0.0408, 0.0410, 0.0412, 0.0414, 0.0416, 0.0418, 0.0420, 0.0420, 0.0420, 0.0420, 0.0420, 0.0420, 0.0422, 0.0424, 0.0426, 0.0428, 0.0430, 0.0432, 0.0434, 0.0436, 0.0438, 0.0440, 0.0440, 0.0440, 0.0440, 0.0440, 0.0440, 0.0442, 0.0444, 0.0446, 0.0448, 0.0450, 0.0450, 0.0450, 0.0450, 0.0450, 0.0450, 0.0452, 0.0454, 0.0456, 0.0458, 0.0460, 0.0462, 0.0464, 0.0466, 0.0468, 0.0470, 0.0472, 0.0474, 0.0476, 0.0478, 0.0480, 0.0484, 0.0488, 0.0492, 0.0496, 0.0500, 0.0504, 0.0508, 0.0512, 0.0516, 0.0520, 0.0526, 0.0532, 0.0538, 0.0544, 0.0550, 0.0554, 0.0558, 0.0562, 0.0566, 0.0570, 0.0580, 0.0590, 0.0600, 0.0610, 0.0620, 0.0630, 0.0640, 0.0650, 0.0660, 0.0670, 0.0686, 0.0702, 0.0718, 0.0734, 0.0750, 0.0766, 0.0782, 0.0798, 0.0814, 0.0830, 0.0848, 0.0866, 0.0884, 0.0902, 0.0920, 0.0936, 0.0952, 0.0968, 0.0984, 0.1000, 0.1016, 0.1032, 0.1048, 0.1064, 0.1080, 0.1106, 0.1132, 0.1158, 0.1184, 0.1210, 0.1234, 0.1258, 0.1282, 0.1306, 0.1330, 0.1348, 0.1366, 0.1384, 0.1402, 0.1420, 0.1436, 0.1452, 0.1468, 0.1484, 0.1500, 0.1508, 0.1516, 0.1524, 0.1532, 0.1540, 0.1542, 0.1544, 0.1546, 0.1548, 0.1550, 0.1544, 0.1538, 0.1532, 0.1526, 0.1520, 0.1510, 0.1500, 0.1490, 0.1480, 0.1470, 0.1456, 0.1442, 0.1428, 0.1414, 0.1400, 0.1386, 0.1372, 0.1358, 0.1344, 0.1330, 0.1314, 0.1298, 0.1282, 0.1266, 0.1250, 0.1236, 0.1222, 0.1208, 0.1194, 0.1180, 0.1168, 0.1156, 0.1144, 0.1132, 0.1120, 0.1108, 0.1096, 0.1084, 0.1072, 0.1060, 0.1050, 0.1040, 0.1030, 0.1020, 0.1010, 0.1004, 0.0998, 0.0992, 0.0986, 0.0980, 0.0974, 0.0968, 0.0962, 0.0956, 0.0950, 0.0946, 0.0942, 0.0938, 0.0934, 0.0930, 0.0924, 0.0918, 0.0912, 0.0906, 0.0900, 0.0898, 0.0896, 0.0894, 0.0892, 0.0890, 0.0886, 0.0882, 0.0878, 0.0874, 0.0870, 0.0868, 0.0866, 0.0864, 0.0862, 0.0860, 0.0858, 0.0856, 0.0854, 0.0852, 0.0850, 0.0848, 0.0846, 0.0844, 0.0842, 0.0840, 0.0840, 0.0840, 0.0840, 0.0840, 0.0840, 0.0840, 0.0840, 0.0840, 0.0840, 0.0840, 0.0840, 0.0840, 0.0840, 0.0840, 0.0840, 0.0842, 0.0844, 0.0846, 0.0848, 0.0850, 0.0854, 0.0858, 0.0862, 0.0866, 0.0870, 0.0880, 0.0890, 0.0900, 0.0910, 0.0920, 0.0928, 0.0936, 0.0944, 0.0952, 0.0960, 0.0972, 0.0984, 0.0996, 0.1008, 0.1020, 0.1036, 0.1052, 0.1068, 0.1084, 0.1100, 0.1126, 0.1152, 0.1178, 0.1204, 0.1230, 0.1258, 0.1286, 0.1314, 0.1342, 0.1370, 0.1400, 0.1430, 0.1460, 0.1490, 0.1520, 0.1554, 0.1588, 0.1622, 0.1656, 0.1690, 0.1728, 0.1766, 0.1804, 0.1842, 0.1880, 0.1918, 0.1956, 0.1994, 0.2032, 0.2070, 0.2108, 0.2146, 0.2184, 0.2222, 0.2260, 0.2294, 0.2328, 0.2362, 0.2396, 0.2430, 0.2464, 0.2498, 0.2532, 0.2566, 0.2600, 0.2634, 0.2668, 0.2702, 0.2736, 0.2770, 0.2804, 0.2838, 0.2872, 0.2906, 0.2940, 0.2972, 0.3004, 0.3036, 0.3068, 0.3100, 0.3130, 0.3160, 0.3190, 0.3220, 0.3250, 0.3278, 0.3306, 0.3334, 0.3362, 0.3390, 0.3418, 0.3446, 0.3474, 0.3502, 0.3530, 0.3556, 0.3582, 0.3608, 0.3634, 0.3660, 0.3686, 0.3712, 0.3738, 0.3764, 0.3790, 0.3812, 0.3834, 0.3856, 0.3878, 0.3900, 0.3918, 0.3936, 0.3954, 0.3972, 0.3990};
    private double[] tcs_15 = {0.131,0.1326,0.1342,0.1358,0.1374,0.139,0.14076,0.14244,0.14404,0.14556,0.147,0.14828,0.14952,0.15072,0.15188,0.153,0.15408,0.15512,0.15612,0.15708,0.158,0.15896,0.15984,0.16064,0.16136,0.162,0.16232,0.16268,0.16308,0.16352,0.164,0.1646,0.1652,0.1658,0.1664,0.167,0.16744,0.16796,0.16856,0.16924,0.17,0.17084,0.17176,0.17276,0.17384,0.175,0.17616,0.17744,0.17884,0.18036,0.182,0.18392,0.18588,0.18788,0.18992,0.192,0.19436,0.19664,0.19884,0.20096,0.203,0.2048,0.2066,0.2084,0.2102,0.212,0.21388,0.21572,0.21752,0.21928,0.221,0.22268,0.22432,0.22592,0.22748,0.229,0.2304,0.2318,0.2332,0.2346,0.236,0.23748,0.23892,0.24032,0.24168,0.243,0.24428,0.24552,0.24672,0.24788,0.249,0.25,0.251,0.252,0.253,0.254,0.255,0.256,0.257,0.258,0.259,0.26,0.261,0.262,0.263,0.264,0.26484,0.26576,0.26676,0.26784,0.269,0.27032,0.27168,0.27308,0.27452,0.276,0.27768,0.27932,0.28092,0.28248,0.284,0.28556,0.28704,0.28844,0.28976,0.291,0.29224,0.29336,0.29436,0.29524,0.296,0.29672,0.29728,0.29768,0.29792,0.298,0.298,0.2978,0.2974,0.2968,0.296,0.2946,0.2932,0.2918,0.2904,0.289,0.28752,0.28608,0.28468,0.28332,0.282,0.28048,0.27912,0.27792,0.27688,0.276,0.27528,0.27472,0.27432,0.27408,0.274,0.27416,0.27444,0.27484,0.27536,0.276,0.277,0.278,0.279,0.28,0.281,0.282,0.283,0.284,0.285,0.286,0.28756,0.28884,0.28984,0.29056,0.291,0.29068,0.29032,0.28992,0.28948,0.289,0.28864,0.28816,0.28756,0.28684,0.286,0.28392,0.28228,0.28108,0.28032,0.28,0.27908,0.27912,0.28012,0.28208,0.285,0.28992,0.29528,0.30108,0.30732,0.314,0.32168,0.32952,0.33752,0.34568,0.354,0.36296,0.37184,0.38064,0.38936,0.398,0.40736,0.41624,0.42464,0.43256,0.44,0.44648,0.45272,0.45872,0.46448,0.47,0.47536,0.48044,0.48524,0.48976,0.494,0.49772,0.50128,0.50468,0.50792,0.511,0.51376,0.51644,0.51904,0.52156,0.524,0.52636,0.52864,0.53084,0.53296,0.535,0.53688,0.53872,0.54052,0.54228,0.544,0.54568,0.54732,0.54892,0.55048,0.552,0.55348,0.55492,0.55632,0.55768,0.559,0.5602,0.5614,0.5626,0.5638,0.565,0.56628,0.56752,0.56872,0.56988,0.571,0.572,0.573,0.574,0.575,0.576,0.577,0.578,0.579,0.58,0.581,0.58208,0.58312,0.58412,0.58508,0.586,0.5868,0.5876,0.5884,0.5892,0.59,0.59072,0.59148,0.59228,0.59312,0.594,0.59508,0.59612,0.59712,0.59808,0.599,0.59988,0.60072,0.60152,0.60228,0.603,0.60352,0.60408,0.60468,0.60532,0.606,0.60696,0.60784,0.60864,0.60936,0.61,0.6104,0.6108,0.6112,0.6116,0.612,0.6124,0.6128,0.6132,0.6136,0.614,0.61456,0.61504,0.61544,0.61576,0.616,0.616,0.616,0.616,0.616,0.616,0.616,0.616,0.616,0.616,0.616,0.61608,0.61612,0.61612,0.61608,0.616,0.61588,0.61572,0.61552,0.61528,0.615,0.61452,0.61408,0.61368,0.61332,0.613,0.61288,0.61272,0.61252,0.61228,0.612,0.61152,0.61108,0.61068,0.61032,0.61,0.6098,0.6096,0.6094,0.6092,0.609,0.6088,0.6086,0.6084,0.6082,0.608,0.60772,0.60748,0.60728,0.60712,0.607,0.60684,0.60676,0.60676,0.60684,0.607,0.60748,0.60792,0.60832,0.60868,0.609,0.6092,0.6094,0.6096,0.6098,0.61,0.6102,0.6104,0.6106,0.6108,0.611};
    private double[] TestDataBeOne = {};
    private double[] distance2 = new double[PrametersRef_cct.Ref_cct_u.length];

    private double illuminance_sum;
    private double xSum;
    private double ySum;
    private double zSum;
    private double XY_x;
    private double XY_y;
    private double UV_u_ci;
    private double UV_v_ci;
    private double UV_u;
    private double UV_v;
    private double Duv;
    private double Duv_2;
    private int Pwave;
    private double Dwave;
    private double[] X_I = new double[16];
    private double[] Y_I = new double[16];
    private double[] Z_I = new double[16];
    private double[] x_i = new double[16];
    private double[] y_i = new double[16];
    private double[] u_i = new double[16];
    private double[] v_i = new double[16];
    private double[] rX_I = new double[16];
    private double[] rY_I = new double[16];
    private double[] rZ_I = new double[16];
    private double[] rx_i = new double[16];
    private double[] ry_i = new double[16];
    private double[] ru_i = new double[16];
    private double[] rv_i = new double[16];

    private double[] sensorData;
    private double[] W_r_i = {61.9146521,60.5807207,61.16376745,59.00197891,60.0627534,59.10425409,60.25296985,62.89571699,43.41817826,81.86473243,49.46163118,26.33646918,80.65221124,39.75674821,64.16254891,0};
    private double[] U_r_i = {37.27207075,17.2075831 ,-10.91122222 ,-37.90134578 ,-32.67944048 ,-22.85141663,13.04075184,38.22420775,121.5633639,29.92082236 ,-47.95927458 ,-31.42854308,34.05641746 ,-8.393784235,37.85286263,0};
    private double[] V_r_i = {5.068904414,14.2536933,22.13984915,11.26871985 ,-4.62319458 ,-20.03653086 ,-17.56097329 ,-10.66506016,4.092627159,30.82360795,9.37228653 ,-31.53183154,10.86161505,11.92327683,6.818529138,0};
    private double[] V_k_i = new double[16];
    private double[] W_k_i = new double[16];
    private double[] U_k_i = new double[16];
    private double[] derta = new double[16];
    private double[] CRI = new double[16];
    private double[] Qi;
    private float Tx;

    public spactrumToParameterUtil(double[] sensorData) {
        this.sensorData = sensorData;
    }

    public void initPrameters() {
        this.TestDataBeOne = BeOne(this.sensorData);
        this.illuminance_sum = sumByParameterArray(illuminance, this.sensorData);
        this.xSum = sumByParameterArray(X, this.sensorData);
        this.ySum = sumByParameterArray(Y, this.sensorData);
        this.zSum = sumByParameterArray(Z, this.sensorData);
        this.XY_x = this.xSum / (this.xSum + this.ySum + this.zSum);
        this.XY_y = this.ySum / (this.xSum + this.ySum + this.zSum);
        this.UV_u_ci = 4 * this.XY_x / (-2 * this.XY_x + 12 * this.XY_y + 3);
        this.UV_v_ci = 9 * this.XY_y / (-2 * this.XY_x + 12 * this.XY_y + 3);
        this.UV_u = 4 * this.XY_x / (-2 * this.XY_x + 12 * this.XY_y + 3);
        this.UV_v = 6 * this.XY_y / (-2 * this.XY_x + 12 * this.XY_y + 3);
        this.distance2 = cct_distance2(this.UV_u,this.UV_v);
        this.Duv_2 = countDuv_2(this.UV_u,this.UV_v);
        this.Duv = CountDuv(this.UV_u, this.UV_v);
        this.Pwave = CountPwave(this.sensorData);
        this.Dwave = CountDwave(this.sensorData);
        
        // do not change order about below
        CountRi();
        this.Qi = CountCQS();


    }

    private double[] CountCQS() {
        double[] vs_X = new double[16];
        double[] vs_Y = new double[16];
        double[] vs_Z = new double[16];
        double[] vs_x_i = new double[16];
        double[] vs_y_i = new double[16];
        double[] vs_Y_k_i = new double[16];
        double[] L_star = new double[16];
        double[] a_star = new double[16];
        double[] b_star = new double[16];
        double[] C_star_ab = new double[16];
        double[] delta_C_star_ab = new double[16];
        double[] delta_E_star_ab = new double[16];
        double[] delta_E_star_ab_ci = new double[16];

        double[] vs_Q_i = new double[16];
        double DERMS = -1.0;

        initRef();
        
        for (int i=0 ; i< vs_X.length;i++){
            if (i == 15){
                vs_X[i] = sumByParameterArray(X,normalnizeData(this.sensorData,Y));
                vs_Y[i] = sumByParameterArray(Y,normalnizeData(this.sensorData,Y));
                vs_Z[i] = sumByParameterArray(Z,normalnizeData(this.sensorData,Y));
                continue;
            }
            vs_X[i] = sumByParameterArray(PrameterRef_vs.X,normalnizeData(this.sensorData,Y),PrameterRef_vs.vs_document.get(i));
            vs_Y[i] = sumByParameterArray(PrameterRef_vs.Y,normalnizeData(this.sensorData,Y),PrameterRef_vs.vs_document.get(i));
            vs_Z[i] = sumByParameterArray(PrameterRef_vs.Z,normalnizeData(this.sensorData,Y), PrameterRef_vs.vs_document.get(i));
            vs_x_i[i] = vs_X[i]/ (vs_X[i]+vs_Y[i]+vs_Z[i]);
            vs_y_i[i] = vs_Y[i]/ (vs_X[i]+vs_Y[i]+vs_Z[i]);
        }
        vs_Y_k_i = vs_Y;
        double avetemp = 0;
        for (int i=0; i < vs_Y_k_i.length;i++){
            L_star[i] = 116*Math.pow(vs_Y[i]/100.0,1.0/3.0)-16;
            a_star[i] = 500*( (Math.pow( vs_X[i] / vs_X[vs_X.length-1] ,1.0/3.0) ) - Math.pow(vs_Y[i]/vs_Y[vs_Y.length-1] ,1.0/3.0) );
            b_star[i] = 200*( (Math.pow( vs_Y[i] / vs_Y[vs_X.length-1] ,1.0/3.0) ) - Math.pow(vs_Z[i]/vs_Z[vs_Z.length-1] ,1.0/3.0) );
            C_star_ab[i] = Math.sqrt(Math.pow(a_star[i],2)+Math.pow(b_star[i],2));
            delta_C_star_ab[i] = C_star_ab[i] - PrameterRef_vs.c_star_ab[i];
            delta_E_star_ab[i] = Math.sqrt( Math.pow(PrameterRef_vs.L_star[i] - L_star[i],2) + Math.pow(PrameterRef_vs.a_star[i] - a_star[i],2) + Math.pow(PrameterRef_vs.b_star[i] - b_star[i],2)  );
            if ( delta_C_star_ab[i] > 0) {
                delta_E_star_ab_ci[i] = Math.sqrt( Math.pow(delta_E_star_ab[i],2) - Math.pow(delta_C_star_ab[i],2) );
            } else {
            	delta_E_star_ab_ci[i] = delta_E_star_ab[i];
            }
            avetemp += delta_E_star_ab[i];
            vs_Q_i[i] = 10 * Math.log( Math.exp( (100-3.104*delta_E_star_ab_ci[i]) / 10.0) + 1 );
        }
        double ave =(avetemp-delta_E_star_ab[15]) / 15.0;
        double SUMSQ = 0.0;
        for (int i =0 ; i < delta_E_star_ab.length-1; i++){
            SUMSQ += Math.pow(delta_E_star_ab[i],2);
        }
        DERMS = Math.sqrt( SUMSQ/15.0);
        vs_Q_i[15] = 10 * Math.log( Math.exp( (100.0-3.104*DERMS) /10.0) + 1 );
        return vs_Q_i;
    }

    private void initRef() {

        double[] rvs_X = new double[16];
        double[] rvs_Y = new double[16];
        double[] rvs_Z = new double[16];
        double[] rvs_x_i = new double[16];
        double[] rvs_y_i = new double[16];
        double[] rvs_Y_k_i = new double[16];
        double[] rL_star = new double[16];
        double[] ra_star = new double[16];
        double[] rb_star = new double[16];
        double[] rC_star_ab = new double[16];

        for (int i=0 ; i< rvs_X.length;i++){
            if (i == 15){
                rvs_X[i] = sumByParameterArray(X,normalnizeData(this.sensorData,Y));
                rvs_Y[i] = sumByParameterArray(Y,normalnizeData(this.sensorData,Y));
                rvs_Z[i] = sumByParameterArray(Z,normalnizeData(this.sensorData,Y));
                continue;
            }
            rvs_X[i] = sumByParameterArray(PrameterRef_vs.X,normalnizeData(this.sensorData,Y),PrameterRef_vs.vs_document.get(i));
            rvs_Y[i] = sumByParameterArray(PrameterRef_vs.Y,normalnizeData(this.sensorData,Y),PrameterRef_vs.vs_document.get(i));
            rvs_Z[i] = sumByParameterArray(PrameterRef_vs.Z,normalnizeData(this.sensorData,Y),PrameterRef_vs.vs_document.get(i));
            rvs_x_i[i] = rvs_X[i]/ (rvs_X[i]+rvs_Y[i]+rvs_Z[i]);
            rvs_y_i[i] = rvs_Y[i]/ (rvs_X[i]+rvs_Y[i]+rvs_Z[i]);
        }
        rvs_Y_k_i = rvs_Y;
        for (int i=0; i < rvs_Y_k_i.length;i++){
            rL_star[i] = 116*Math.pow(rvs_Y[i]/100.0,1.0/3.0)-16;
            ra_star[i] = 500*( (Math.pow( rvs_X[i] / rvs_X[rvs_X.length-1] ,1.0/3.0) ) - Math.pow(rvs_Y[i]/rvs_Y[rvs_Y.length-1] ,1.0/3.0) );
            rb_star[i] = 200*( (Math.pow( rvs_Y[i] / rvs_Y[rvs_X.length-1] ,1.0/3.0) ) - Math.pow(rvs_Z[i]/rvs_Z[rvs_Z.length-1] ,1.0/3.0) );
            rC_star_ab[i] = Math.sqrt(Math.pow(ra_star[i],2)+Math.pow(rb_star[i],2));
        }

	}

	private double countDuv_2(double u0 ,double v0) {
        double min = 1;
        int position = 1;
        for(int i=0;i<distance2.length;i++){
            if (min - distance2[i] > 0 ){
                min = distance2[i];
                position = i;
            }
        }

        float Dm_minus_1 = (float) Math.sqrt( Math.pow(PrametersRef_cct.Ref_cct_v[position-1] - v0,2.0) + Math.pow(PrametersRef_cct.Ref_cct_u[position-1] - u0,2.0) );
        float Dm_add_1 = (float) Math.sqrt( Math.pow(PrametersRef_cct.Ref_cct_v[position+1] - v0,2.0) + Math.pow(PrametersRef_cct.Ref_cct_u[position+1] - u0,2.0) );
        float L = (float) Math.sqrt( Math.pow(PrametersRef_cct.Ref_cct_v[position+1] - PrametersRef_cct.Ref_cct_v[position-1],2.0) + Math.pow(PrametersRef_cct.Ref_cct_u[position+1] - PrametersRef_cct.Ref_cct_u[position-1],2.0) );
        float x = (float) (Math.pow(Dm_minus_1,2.0) + Math.pow(Dm_add_1,2.0) + Math.pow(L,2.0) / 2*L);
        Tx = (float) (PrametersRef_cct.Ref_colorTemp[position-1] + (PrametersRef_cct.Ref_colorTemp[position+1] - PrametersRef_cct.Ref_colorTemp[position-1])*x/L);

        double res;
        if (v0 > Math.max(PrametersRef_cct.Ref_cct_v[position-1],PrametersRef_cct.Ref_cct_v[position+1] )){
            res = Math.sqrt(Dm_minus_1*Dm_minus_1 - x*x );
        }else {
            res = - Math.sqrt(Dm_minus_1*Dm_minus_1 - x*x );
        }
        return res;
    }

    private double[] cct_distance2(double uv_u, double uv_v) {
        for (int i=0 ; i < PrametersRef_cct.Ref_cct_u.length ; i++) {
            this.distance2[i] = (PrametersRef_cct.Ref_cct_u[i]-uv_u)*(PrametersRef_cct.Ref_cct_u[i]-uv_u) + (PrametersRef_cct.Ref_cct_v[i]-uv_v)*(PrametersRef_cct.Ref_cct_v[i]-uv_v);
        }
        return this.distance2;
    }

    private double[] BeOne(double[] sensorData) {
        double max=0;
        double[] res = new double[sensorData.length];
        int i = 0;
        for(double d:sensorData){
            if (max<d){
                max = d;
            }
        }
        for (double d : sensorData) {
            res[i++] = d/max;
        }
        return res;
    }

    private void CountRi() {
        ArrayList<double[]> tcs = new ArrayList<>();
        tcs.add(tcs_1);tcs.add(tcs_2);tcs.add(tcs_3);tcs.add(tcs_4);tcs.add(tcs_5);tcs.add(tcs_6);tcs.add(tcs_7);tcs.add(tcs_8);tcs.add(tcs_9);tcs.add(tcs_10);tcs.add(tcs_11);tcs.add(tcs_12);tcs.add(tcs_13);tcs.add(tcs_14);tcs.add(tcs_15);

        initRefFromCCT();
        
        double[] Y_normalized = normalnizeData(this.sensorData,Y);
//        double[] Z_normalized = normalnizeData(this.sensorData,Z);
        

        for (int a=0;a < this.X_I.length;a++){
            if (a == 15){
                this.X_I[a] = sumByParameterArray(X,Y_normalized);
                this.Y_I[a] = sumByParameterArray(Y,Y_normalized);
                this.Z_I[a] = sumByParameterArray(Z,Y_normalized);
                continue;
            }
            this.X_I[a] = sumByParameterArray(X,Y_normalized,tcs.get(a));
            this.Y_I[a] = sumByParameterArray(Y,Y_normalized,tcs.get(a));
            this.Z_I[a] = sumByParameterArray(Z,Y_normalized,tcs.get(a));
        }

        for (int i=0;i <this.X_I.length;i++){
            this.x_i[i] = this.X_I[i] / (this.X_I[i] + this.Y_I[i] + this.Z_I[i] );
            this.y_i[i] = this.Y_I[i] / (this.X_I[i] + this.Y_I[i] + this.Z_I[i] );
            this.W_k_i[i] = 25*Math.pow(this.Y_I[i],1.0/3.0)-17;
        }

        this.u_i = hand_u_i();
        this.v_i = hand_v_i();
        for (int i=0;i<this.U_k_i.length;i++) {
            this.U_k_i[i] =13*this.W_k_i[i]*(this.u_i[i]-this.u_i[this.u_i.length-1]);
            this.V_k_i[i] =13*this.W_k_i[i]*(this.v_i[i]-this.v_i[this.v_i.length-1]);
            this.derta[i] = Math.sqrt( Math.pow(this.W_r_i[i]-this.W_k_i[i],2)+ Math.pow(this.U_r_i[i]-this.U_k_i[i],2)+ Math.pow(this.V_r_i[i]-this.V_k_i[i],2));
            this.CRI[i] = 100 - 4.6*this.derta[i];
        }
    }

    private void initRefFromCCT() {
        ArrayList<double[]> tcs = new ArrayList<>();
        tcs.add(tcs_1);tcs.add(tcs_2);tcs.add(tcs_3);tcs.add(tcs_4);tcs.add(tcs_5);tcs.add(tcs_6);tcs.add(tcs_7);tcs.add(tcs_8);tcs.add(tcs_9);tcs.add(tcs_10);tcs.add(tcs_11);tcs.add(tcs_12);tcs.add(tcs_13);tcs.add(tcs_14);tcs.add(tcs_15);

    	double factor1 = 3.7400000E-16;
    	double factor2 = 1.4400000E-02;
    	double[] refData = new double[401];
    	
    	if (this.Tx < 5000) {
        	for(int i=0;i < refData.length;i++){
        		BigDecimal factor1Big = new BigDecimal(factor1).setScale(50,BigDecimal.ROUND_HALF_UP);
        		BigDecimal factor2Big = new BigDecimal(factor2).setScale(50,BigDecimal.ROUND_HALF_UP);
        		BigDecimal a = new BigDecimal((380+i) * 0.000000001).setScale(50,BigDecimal.ROUND_HALF_UP);
        		BigDecimal TxBig = new BigDecimal(this.Tx).setScale(50,BigDecimal.ROUND_HALF_UP);
        		BigDecimal expTemp = factor2Big.divide(a.multiply(TxBig), BigDecimal.ROUND_HALF_UP).setScale(40,BigDecimal.ROUND_HALF_UP);
        		double exptemp = Math.exp(expTemp.doubleValue()) - 1;
        		BigDecimal exp = new BigDecimal(exptemp).setScale(40,BigDecimal.ROUND_HALF_UP);
        		refData[i] = factor1Big.divide(a.pow(5), BigDecimal.ROUND_HALF_UP).divide(exp, BigDecimal.ROUND_HALF_UP).doubleValue();
        	}
    	}else {
			double[] s0 = {63.4,63.64,63.88,64.12,64.36,64.6,64.84,65.08 ,65.32,65.56,65.8,68.7,71.6,74.5,77.4,80.3,83.2,86.1,89,91.9,94.8,95.8,96.8,97.8,98.8,99.8,100.8,101.8,102.8,103.8,104.8,104.91,105.02,105.13,105.24,105.35,105.46,105.57,105.68,105.79,105.9,104.99,104.08,103.17,102.26,101.35,100.44,99.53,98.62,97.71,96.8,98.51,100.22,101.93,103.64,105.35,107.06,108.77,110.48,112.19,113.9,115.07,116.24,117.41,118.58,119.75,120.92,122.09,123.26,124.43,125.6,125.59,125.58,125.57,125.56,125.55,125.54,125.53,125.52,125.51,125.5,125.08,124.66,124.24,123.82,123.4,122.98,122.56,122.14,121.72,121.3,121.3,121.3,121.3,121.3,121.3,121.3,121.3,121.3,121.3,121.3,120.52,119.74,118.96,118.18,117.4,116.62,115.84,115.06,114.28,113.5,113.46,113.42,113.38,113.34,113.3,113.26,113.22,113.18,113.14,113.1,112.87,112.64,112.41,112.18,111.95,111.72,111.49,111.26,111.03,110.8,110.37,109.94,109.51,109.08,108.65,108.22,107.79,107.36,106.93,106.5,106.73,106.96,107.19,107.42,107.65,107.88,108.11,108.34,108.57,108.8,108.45,108.1,107.75,107.4,107.05,106.7,106.35,106,105.65,105.3,105.21,105.12,105.03,104.94,104.85,104.76,104.67,104.58,104.49,104.4,103.96,103.52,103.08,102.64,102.2,101.76,101.32,100.88,100.44,100,99.6,99.2,98.8,98.4,98,97.6,97.2,96.8,96.4,96,95.91,95.82,95.73,95.64,95.55,95.46,95.37,95.28,95.19,95.1,94.5,93.9,93.3,92.7,92.1,91.5,90.9,90.3,89.7,89.1,89.24,89.38,89.52,89.66,89.8,89.94,90.08,90.22,90.36,90.5,90.48,90.46,90.44,90.42,90.4,90.38,90.36,90.34,90.32,90.3,90.11,89.92,89.73,89.54,89.35,89.16,88.97,88.78,88.59,88.4,87.96,87.52,87.08,86.64,86.2,85.76,85.32,84.88,84.44,84,84.11,84.22,84.33,84.44,84.55,84.66,84.77,84.88,84.99,85.1,84.78,84.46,84.14,83.82,83.5,83.18,82.86,82.54,82.22,81.9,81.97,82.04,82.11,82.18,82.25,82.32,82.39,82.46,82.53,82.6,82.83,83.06,83.29,83.52,83.75,83.98,84.21,84.44,84.67,84.9,84.54,84.18,83.82,83.46,83.1,82.74,82.38,82.02,81.66,81.3,80.36,79.42,78.48,77.54,76.6,75.66,74.72,73.78,72.84,71.9,72.14,72.38,72.62,72.86,73.1,73.34,73.58,73.82,74.06,74.3,74.51,74.72,74.93,75.14,75.35,75.56,75.77,75.98,76.19,76.4,75.09,73.78,72.47,71.16,69.85,68.54,67.23,65.92,64.61,63.3,64.14,64.98,65.82,66.66,67.5,68.34,69.18,70.02,70.86,71.7,72.23,72.76,73.29,73.82,74.35,74.88,75.41,75.94,76.47,77,75.82,74.64,73.46,72.28,71.1,69.92,68.74,67.56,66.38,65.2,63.45,61.7,59.95,58.2,56.45,54.7,52.95,51.2,49.45,47.7,49.79,51.88,53.97,56.06,58.15,60.24,62.33,64.42,66.51,68.6,68.24,67.88,67.52,67.16,66.8,66.44,66.08,65.72,65.36,65};
    		double[] s1 = {38.5,38.15,37.8,37.45,37.1,36.75,36.4,36.05,35.7,35.35,35,35.84,36.68,37.52,38.36,39.2,40.04,40.88,41.72,42.56,43.4,43.69,43.98,44.27,44.56,44.85,45.14,45.43,45.72,46.01,46.3,46.06,45.82,45.58,45.34,45.1,44.86,44.62,44.38,44.14,43.9,43.22,42.54,41.86,41.18,40.5,39.82,39.14,38.46,37.78,37.1,37.06,37.02,36.98,36.94,36.9,36.86,36.82,36.78,36.74,36.7,36.62,36.54,36.46,36.38,36.3,36.22,36.14,36.06,35.98,35.9,35.57,35.24,34.91,34.58,34.25,33.92,33.59,33.26,32.93,32.6,32.13,31.66,31.19,30.72,30.25,29.78,29.31,28.84,28.37,27.9,27.54,27.18,26.82,26.46,26.1,25.74,25.38,25.02,24.66,24.3,23.88,23.46,23.04,22.62,22.2,21.78,21.36,20.94,20.52,20.1,19.71,19.32,18.93,18.54,18.15,17.76,17.37,16.98,16.59,16.2,15.9,15.6,15.3,15,14.7,14.4,14.1,13.8,13.5,13.2,12.74,12.28,11.82,11.36,10.9,10.44,9.98,9.52,9.06,8.6,8.35,8.1,7.85,7.6,7.35,7.1,6.85,6.6,6.35,6.1,5.91,5.72,5.53,5.34,5.15,4.96,4.77,4.58,4.39,4.2,3.97,3.74,3.51,3.28,3.05,2.82,2.59,2.36,2.13,1.9,1.71,1.52,1.33,1.14,0.95,0.76,0.57,0.38,0.19,-1.42109E-14,-0.16,-0.32,-0.48,-0.64,-0.8,-0.96,-1.12,-1.28,-1.44,-1.6,-1.79,-1.98,-2.17,-2.36,-2.55,-2.74,-2.93,-3.12,-3.31,-3.5,-3.5,-3.5,-3.5,-3.5,-3.5,-3.5,-3.5,-3.5,-3.5,-3.5,-3.73,-3.96,-4.19,-4.42,-4.65,-4.88,-5.11,-5.34,-5.57,-5.8,-5.94,-6.08,-6.22,-6.36,-6.5,-6.64,-6.78,-6.92,-7.06,-7.2,-7.34,-7.48,-7.62,-7.76,-7.9,-8.04,-8.18,-8.32,-8.46,-8.6,-8.69,-8.78,-8.87,-8.96,-9.05,-9.14,-9.23,-9.32,-9.41,-9.5,-9.64,-9.78,-9.92,-10.06,-10.2,-10.34,-10.48,-10.62,-10.76,-10.9,-10.88,-10.86,-10.84,-10.82,-10.8,-10.78,-10.76,-10.74,-10.72,-10.7,-10.83,-10.96,-11.09,-11.22,-11.35,-11.48,-11.61,-11.74,-11.87,-12,-12.2,-12.4,-12.6,-12.8,-13,-13.2,-13.4,-13.6,-13.8,-14,-13.96,-13.92,-13.88,-13.84,-13.8,-13.76,-13.72,-13.68,-13.64,-13.6,-13.44,-13.28,-13.12,-12.96,-12.8,-12.64,-12.48,-12.32,-12.16,-12,-12.13,-12.26,-12.39,-12.52,-12.65,-12.78,-12.91,-13.04,-13.17,-13.3,-13.26,-13.22,-13.18,-13.14,-13.1,-13.06,-13.02,-12.98,-12.94,-12.9,-12.67,-12.44,-12.21,-11.98,-11.75,-11.52,-11.29,-11.06,-10.83,-10.6,-10.7,-10.8,-10.9,-11,-11.1,-11.2,-11.3,-11.4,-11.5,-11.6,-11.66,-11.72,-11.78,-11.84,-11.9,-11.96,-12.02,-12.08,-12.14,-12.2,-12,-11.8,-11.6,-11.4,-11.2,-11,-10.8,-10.6,-10.4,-10.2,-9.96,-9.72,-9.48,-9.24,-9,-8.76,-8.52,-8.28,-8.04,-7.8,-8.14,-8.48,-8.82,-9.16,-9.5,-9.84,-10.18,-10.52,-10.86,-11.2,-11.12,-11.04,-10.96,-10.88,-10.8,-10.72,-10.64,-10.56,-10.48,-10.4};
    		double[] s2 = {3,2.82,2.64,2.46,2.28,2.1,1.92,1.74,1.56,1.38,1.2,0.97,0.74,0.51,0.28,0.05,-0.18,-0.41,-0.64,-0.87,-1.1,-1.04,-0.98,-0.92,-0.86,-0.8,-0.74,-0.68,-0.62,-0.56,-0.5,-0.52,-0.54,-0.56,-0.58,-0.6,-0.62,-0.64,-0.66,-0.68,-0.7,-0.75,-0.8,-0.85,-0.9,-0.95,-1,-1.05,-1.1,-1.15,-1.2,-1.34,-1.48,-1.62,-1.76,-1.9,-2.04,-2.18,-2.32,-2.46,-2.6,-2.63,-2.66,-2.69,-2.72,-2.75,-2.78,-2.81,-2.84,-2.87,-2.9,-2.89,-2.88,-2.87,-2.86,-2.85,-2.84,-2.83,-2.82,-2.81,-2.8,-2.78,-2.76,-2.74,-2.72,-2.7,-2.68,-2.66,-2.64,-2.62,-2.6,-2.6,-2.6,-2.6,-2.6,-2.6,-2.6,-2.6,-2.6,-2.6,-2.6,-2.52,-2.44,-2.36,-2.28,-2.2,-2.12,-2.04,-1.96,-1.88,-1.8,-1.77,-1.74,-1.71,-1.68,-1.65,-1.62,-1.59,-1.56,-1.53,-1.5,-1.48,-1.46,-1.44,-1.42,-1.4,-1.38,-1.36,-1.34,-1.32,-1.3,-1.29,-1.28,-1.27,-1.26,-1.25,-1.24,-1.23,-1.22,-1.21,-1.2,-1.18,-1.16,-1.14,-1.12,-1.1,-1.08,-1.06,-1.04,-1.02,-1,-0.95,-0.9,-0.85,-0.8,-0.75,-0.7,-0.65,-0.6,-0.55,-0.5,-0.48,-0.46,-0.44,-0.42,-0.4,-0.38,-0.36,-0.34,-0.32,-0.3,-0.27,-0.24,-0.21,-0.18,-0.15,-0.12,-0.09,-0.06,-0.03,1.77636E-15,0.02,0.04,0.06,0.08,0.1,0.12,0.14,0.16,0.18,0.2,0.23,0.26,0.29,0.32,0.35,0.38,0.41,0.44,0.47,0.5,0.66,0.82,0.98,1.14,1.3,1.46,1.62,1.78,1.94,2.1,2.21,2.32,2.43,2.54,2.65,2.76,2.87,2.98,3.09,3.2,3.29,3.38,3.47,3.56,3.65,3.74,3.83,3.92,4.01,4.1,4.16,4.22,4.28,4.34,4.4,4.46,4.52,4.58,4.64,4.7,4.74,4.78,4.82,4.86,4.9,4.94,4.98,5.02,5.06,5.1,5.26,5.42,5.58,5.74,5.9,6.06,6.22,6.38,6.54,6.7,6.76,6.82,6.88,6.94,7,7.06,7.12,7.18,7.24,7.3,7.43,7.56,7.69,7.82,7.95,8.08,8.21,8.34,8.47,8.6,8.72,8.84,8.96,9.08,9.2,9.32,9.44,9.56,9.68,9.8,9.84,9.88,9.92,9.96,10,10.04,10.08,10.12,10.16,10.2,10.01,9.82,9.63,9.44,9.25,9.06,8.87,8.68,8.49,8.3,8.43,8.56,8.69,8.82,8.95,9.08,9.21,9.34,9.47,9.6,9.49,9.38,9.27,9.16,9.05,8.94,8.83,8.72,8.61,8.5,8.35,8.2,8.05,7.9,7.75,7.6,7.45,7.3,7.15,7,7.06,7.12,7.18,7.24,7.3,7.36,7.42,7.48,7.54,7.6,7.64,7.68,7.72,7.76,7.8,7.84,7.88,7.92,7.96,8,7.87,7.74,7.61,7.48,7.35,7.22,7.09,6.96,6.83,6.7,6.55,6.4,6.25,6.1,5.95,5.8,5.65,5.5,5.35,5.2,5.42,5.64,5.86,6.08,6.3,6.52,6.74,6.96,7.18,7.4,7.34,7.28,7.22,7.16,7.1,7.04,6.98,6.92,6.86,6.8};
    		
    		double XD1_temp = -4.607  * 1000000000  /(this.Tx*this.Tx*this.Tx) + 2.9768*1000000 /(this.Tx*this.Tx) + 0.09911*1000/this.Tx + 0.244063 ;
    		double XD2 = -2.0064 * 1000000000  /(this.Tx*this.Tx*this.Tx) + 1.9018*1000000 /(this.Tx*this.Tx) + 0.24748*1000/this.Tx + 0.23704 ;
    		
    		double XD1 = 0.0;
    		double YD1 = 0.0;

    		if (this.Tx < 7000) {
				XD1 = XD1_temp;
				YD1 = -3*XD1*XD1 + 2.87*XD1 - 0.275;
			}else {
				XD1 = XD2;
				YD1 = -3*XD1*XD1 + 2.87*XD1 - 0.275;	
			}
    		
    		double M1 = (-1.3515 - 1.7703*XD1 + 5.9114*YD1) / (0.0241 + 0.2562*XD1 - 0.7431*YD1);
    		double M2 = (0.03 - 31.4424*XD1 + 30.0717*YD1) / (0.0241 + 0.2562*XD1 - 0.7431*YD1);
    		
    		for(int i=0; i < refData.length ; i++){
    			refData[i] = s0[i] + s1[i]*M1 + s2[i]*M2;
    		}
    		
		}
    	double[] ref_normalized = normalnizeData1(refData, Y);

    	//init ref W,U,V
        for (int a=0;a < this.X_I.length;a++){
            if (a == 15){
                this.rX_I[a] = sumByParameterArray(X,ref_normalized);
                this.rY_I[a] = sumByParameterArray(Y,ref_normalized);
                this.rZ_I[a] = sumByParameterArray(Z,ref_normalized);
                continue;
            }
           
            this.rX_I[a] = sumByParameterArray(X,ref_normalized,tcs.get(a));
            this.rY_I[a] = sumByParameterArray(Y,ref_normalized,tcs.get(a));
            this.rZ_I[a] = sumByParameterArray(Z,ref_normalized,tcs.get(a));
        }

        for (int i=0;i <this.rX_I.length;i++){
            this.rx_i[i] = this.rX_I[i] / (this.rX_I[i] + this.rY_I[i] + this.rZ_I[i] );
            this.ry_i[i] = this.rY_I[i] / (this.rX_I[i] + this.rY_I[i] + this.rZ_I[i] );
            this.W_r_i[i] = 25*Math.pow(this.rY_I[i],1.0/3.0)-17;
        }

        this.ru_i = R_hand_u_i();
        this.rv_i = R_hand_v_i();
        
        for(int i=0;i < this.W_r_i.length;i++){
        	this.U_r_i[i] =13*this.W_r_i[i]*(this.ru_i[i]-this.ru_i[this.ru_i.length-1]);
            this.V_r_i[i] =13*this.W_r_i[i]*(this.rv_i[i]-this.rv_i[this.rv_i.length-1]);
        }

	}

	private double[] hand_v_i() {
        double[] temp_u = new double[16];
        double[] temp_v = new double[16];
        double[] ck = new double[16];
        double[] dk = new double[16];
        for (int i=0;i<temp_u.length;i++) {
            temp_u[i] = 4* this.x_i[i] / (-2*this.x_i[i] + 12*this.y_i[i] + 3);
            temp_v[i] = 6* this.y_i[i] / (-2*this.x_i[i] + 12*this.y_i[i] + 3);
            ck[i] = (4-temp_u[i]-10*temp_v[i])/temp_v[i];
            dk[i] = (1.708*temp_v[i] + 0.404 -1.481*temp_u[i])/temp_v[i];
        }
        double Uk = temp_u[temp_u.length-1];
        double Ur = 0.228900;
        double Vk = temp_v[temp_v.length-1];
        double Vr = 0.336900;
        double Ck = (4 - Uk - 10*Vk)/Vk;
        double Cr = (4 - Ur - 10*Vr)/Vr;
        double Dk = (1.708*Vk + 0.404 - 1.481*Uk)/Vk;
        double Dr = (1.708*Vr + 0.404 - 1.481*Ur)/Vr;

        double[] res = new double[16];
        for (int i=0;i<res.length;i++){
            res[i] = 5.52/( 16.518 + 1.481*Cr/Ck*ck[i] - Dr/Dk*dk[i]);
        }
        return res;
    }
	
	private double[] R_hand_v_i() {
        double[] temp_u = new double[16];
        double[] temp_v = new double[16];
        double[] ck = new double[16];
        double[] dk = new double[16];
        for (int i=0;i<temp_u.length;i++) {
            temp_u[i] = 4* this.rx_i[i] / (-2*this.rx_i[i] + 12*this.ry_i[i] + 3);
            temp_v[i] = 6* this.ry_i[i] / (-2*this.rx_i[i] + 12*this.ry_i[i] + 3);
            ck[i] = (4-temp_u[i]-10*temp_v[i])/temp_v[i];
            dk[i] = (1.708*temp_v[i] + 0.404 -1.481*temp_u[i])/temp_v[i];
        }
        double Uk = temp_u[temp_u.length-1];
        double Ur = 0.228900;
        double Vk = temp_v[temp_v.length-1];
        double Vr = 0.336900;
        double Ck = (4 - Uk - 10*Vk)/Vk;
        double Cr = (4 - Ur - 10*Vr)/Vr;
        double Dk = (1.708*Vk + 0.404 - 1.481*Uk)/Vk;
        double Dr = (1.708*Vr + 0.404 - 1.481*Ur)/Vr;

        double[] res = new double[16];
        for (int i=0;i<res.length;i++){
            res[i] = 5.52/( 16.518 + 1.481*Cr/Ck*ck[i] - Dr/Dk*dk[i]);
        }
        return res;
    }
	

    private double[] hand_u_i() {
        double[] temp_u = new double[16];
        double[] temp_v = new double[16];
        double[] ck = new double[16];
        double[] dk = new double[16];
        for (int i=0;i<temp_u.length;i++) {
            temp_u[i] = 4* this.x_i[i] / (-2*this.x_i[i] + 12*this.y_i[i] + 3);
            temp_v[i] = 6* this.y_i[i] / (-2*this.x_i[i] + 12*this.y_i[i] + 3);
            ck[i] = (4-temp_u[i]-10*temp_v[i])/temp_v[i];
            dk[i] = (1.708*temp_v[i] + 0.404 -1.481*temp_u[i])/temp_v[i];
        }
        double Uk = temp_u[temp_u.length-1];
        double Ur = 0.228900;
        double Vk = temp_v[temp_v.length-1];
        double Vr = 0.336900;
        double Ck = (4 - Uk - 10*Vk)/Vk;
        double Cr = (4 - Ur - 10*Vr)/Vr;
        double Dk = (1.708*Vk + 0.404 - 1.481*Uk)/Vk;
        double Dr = (1.708*Vr + 0.404 - 1.481*Ur)/Vr;

        double[] res = new double[16];
        for (int i=0;i<res.length;i++){
            res[i] = ( 10.872 + 0.404*Cr/Ck*ck[i] - 4*Dr/Dk*dk[i]) / (16.518 + 1.481*Cr/Ck*ck[i]-Dr/Dk*dk[i]);
        }
        return res;
    }

    private double[] R_hand_u_i() {
        double[] temp_u = new double[16];
        double[] temp_v = new double[16];
        double[] ck = new double[16];
        double[] dk = new double[16];
        for (int i=0;i<temp_u.length;i++) {
            temp_u[i] = 4* this.rx_i[i] / (-2*this.rx_i[i] + 12*this.ry_i[i] + 3);
            temp_v[i] = 6* this.ry_i[i] / (-2*this.rx_i[i] + 12*this.ry_i[i] + 3);
            ck[i] = (4-temp_u[i]-10*temp_v[i])/temp_v[i];
            dk[i] = (1.708*temp_v[i] + 0.404 -1.481*temp_u[i])/temp_v[i];
        }
        double Uk = temp_u[temp_u.length-1];
        double Ur = 0.228900;
        double Vk = temp_v[temp_v.length-1];
        double Vr = 0.336900;
        double Ck = (4 - Uk - 10*Vk)/Vk;
        double Cr = (4 - Ur - 10*Vr)/Vr;
        double Dk = (1.708*Vk + 0.404 - 1.481*Uk)/Vk;
        double Dr = (1.708*Vr + 0.404 - 1.481*Ur)/Vr;

        double[] res = new double[16];
        for (int i=0;i<res.length;i++){
            res[i] = ( 10.872 + 0.404*Cr/Ck*ck[i] - 4*Dr/Dk*dk[i]) / (16.518 + 1.481*Cr/Ck*ck[i]-Dr/Dk*dk[i]);
        }
        return res;
    }
    
    
    private int CountPwave(double[] sensorData) {
        int res = 0;
        double max = 0;
        for (int i = 0; i < sensorData.length; i++) {
            if (max < sensorData[i]) {
                max = sensorData[i];
                res = i;
            }
        }
        return res+380;
    }

    private int CountDwave(double[] sensorData) {
        int res = 0;
        int L1 = this.XY_x < 0.3333 && this.XY_y < 0.3333 ? 1:0;
        int L2 = this.XY_x > 0.3333 && this.XY_y < 0.3333 ? -1:1;

        double vectorwavel = Math.sqrt( Math.pow(this.XY_x - 0.3333, 2) + Math.pow(this.XY_y - 0.3333, 2) );
        
        double L3;
        if (L1 == 1) {
			L3 = Math.acos(-(this.XY_x -0.3333) / vectorwavel * L2 + L1*3.14159);
		}else {
			L3 = Math.acos( (this.XY_x -0.3333) / vectorwavel * L2 + L1*3.14159);
		}

        double[] dis_2 = new double[401];
        double[] x = {4.26095,4.26089,4.26084,4.26079,4.26073,4.26067,4.26060,4.26053,4.26044,4.26035,4.26024,4.26011,4.25998,4.25984,4.25973,4.25963,4.25956,4.25948,4.25940,4.25932,4.25924,4.25914,4.25901,4.25886,4.25868,4.25849,4.25827,4.25803,4.25779,4.25757,4.25736,4.25716,4.25692,4.25667,4.25640,4.25612,4.25584,4.25553,4.25515,4.25468,4.25413,4.25351,4.25283,4.25213,4.25138,4.25059,4.24975,4.24885,4.24790,4.24686,4.24575,4.24453,4.24323,4.24185,4.24038,4.23885,4.23725,4.23555,4.23377,4.23188,4.22990,4.22780,4.22559,4.22324,4.22074,4.21807,4.21523,4.21221,4.20901,4.20563,4.20208,4.19835,4.19446,4.19038,4.18608,4.18154,4.17674,4.17165,4.16630,4.16067,4.15476,4.14856,4.14201,4.13503,4.12750,4.11925,4.11010,4.09995,4.08873,4.07640,4.06297,4.04841,4.03256,4.01524,3.99626,3.97534,3.952258263,3.926797527,3.898718172,3.867770194,3.833703172,3.796226578,3.754988108,3.709683874,3.660083523,3.606083054,3.547783305,3.485244262,3.418544804,3.347945822,3.273923572,3.197315283,3.11938215,3.041453375,2.964842132,2.890719251,2.82006,2.753382585,2.690901546,2.632703079,2.578767807,2.529108269,2.483639583,2.442006455,2.403749053,2.368357881,2.335424122,2.30475389,2.27616551,2.249496648,2.224602262,2.201292598,2.179451497,2.159036907,2.139987469,2.122229649,2.105626858,2.090031985,2.075348364,2.061478577,2.048325589,2.035803177,2.023769514,2.012066678,2.000560923,1.989138427,1.977722337,1.966305543,1.954892621,1.943488803,1.932099953,1.920709006,1.909270744,1.897750535,1.886115401,1.874333398,1.862380197,1.850230195,1.837848692,1.825199937,1.812246762,1.798953538,1.785291211,1.771230944,1.756743118,1.741797259,1.726359558,1.710388796,1.693842465,1.676678625,1.65885634,1.640318712,1.621035803,1.600969174,1.580077416,1.55831547,1.535629764,1.511979826,1.487335749,1.461665549,1.434934287,1.407096799,1.378154581,1.348089497,1.316891202,1.284558589,1.251105571,1.216566787,1.180987869,1.144425603,1.106948164,1.068638495,1.029602383,0.989960333,0.949844943,0.909398783,0.868769601,0.82811912,0.787614128,0.747414155,0.707668298,0.668508589,0.630061978,0.592450987,0.5557852,0.520160281,0.485661222,0.452338718,0.420217794,0.389313724,0.359633118,0.331154926,0.303914729,0.277981894,0.253406942,0.230224683,0.208437726,0.187925957,0.168541754,0.150152595,0.132639387,0.11592185,0.100013574,0.08494161,0.070728401,0.05739328,0.044923288,0.033236266,0.022254623,0.011909084,0.002137528,-0.007096513,-0.015809608,-0.024026861,-0.031770913,-0.039062039,-0.045922863,-0.052379472,-0.058455743,-0.064175441,-0.069562239,-0.074639217,-0.079430292,-0.083958415,-0.08824313,-0.092300938,-0.096141293,-0.099780951,-0.103244272,-0.106553854,-0.109730785,-0.11278842,-0.11572403,-0.118535301,-0.121221813,-0.123785173,-0.126231277,-0.128565655,-0.130791227,-0.13291133,-0.134929817,-0.136853435,-0.138684982,-0.140421533,-0.142059715,-0.14359572,-0.145024556,-0.14635219,-0.147590216,-0.148752798,-0.149860547,-0.150921199,-0.151932226,-0.152891486,-0.153797243,-0.154648506,-0.155450637,-0.156206952,-0.156914814,-0.157571469,-0.158174063,-0.158721438,-0.159217087,-0.159668723,-0.16008654,-0.160483785,-0.160874679,-0.161259402,-0.161634559,-0.16199596,-0.162337848,-0.16265936,-0.162964897,-0.163257142,-0.163540395,-0.163820888,-0.164105989,-0.164394577,-0.164682805,-0.16496691,-0.165243359,-0.165515343,-0.165785438,-0.166048842,-0.166299196,-0.166526592,-0.166721008,-0.166882537,-0.167016127,-0.167128483,-0.167230781,-0.167329752,-0.167422793,-0.167507939,-0.167585252,-0.167654216,-0.167717521,-0.167777561,-0.167832023,-0.167869595,-0.167875167,-0.16788099,-0.167886815,-0.167893081,-0.167900452,-0.167907938,-0.167915635,-0.167923753,-0.167933721,-0.167942257,-0.167953667,-0.16796437,-0.167976543,-0.167989552,-0.168003237,-0.168019068,-0.168033526,-0.168051967,-0.168071461,-0.168093157,-0.168113117,-0.168135811,-0.168159724,-0.16818837,-0.168214615,-0.168245081,-0.16827923,-0.168313298,-0.168348355,-0.168395386,-0.168435764,-0.168486462,-0.168539955,-0.168587368,-0.168651782,-0.168719269,-0.168795858,-0.168865724,-0.168943245,-0.169046415,-0.169135702,-0.169244692,-0.169341311,-0.1694648,-0.169595894,-0.169737769,-0.169878762,-0.17005425,-0.170215266,-0.170399712,-0.170580493,-0.170785085,-0.171014687,-0.17123182,-0.171481089,-0.171748747,-0.17202172,-0.172337154,-0.172654473,-0.173013603,-0.173379569,-0.173773584,-0.174208342,-0.174684678,-0.175177033,-0.175702995,-0.176279918,-0.176881764,-0.177547996,-0.17825934,-0.179010868,-0.179829007,-0.180690063,-0.181639635,-0.182631796,-0.183723849,-0.184868306,-0.186117781,-0.187456788,-0.188879945,-0.190423647};
        for(int i=0 ; i < dis_2.length ;i++){
        	dis_2[i] = (x[i] - L3)*(x[i] - L3);
        }
        int D4 = 0 ;
        int D5 = 0 ;
        int D6 = 0 ; 
        double min = 10000.0;
        for(int i=0 ; i < dis_2.length ;i++){
        	if (min > dis_2[i]) {
				min = dis_2[i];
				D5 = 380 + i;
			}
        }
        D4 = D5 - 1;
        D6 = D5 + 1;
        double E4 = x[D4 - 380];
        double E5 = x[D5 - 380];
        double E6 = x[D6 - 380];

        
        double[] mateix_a = new double[3];
        double[] mateix_b = new double[3];
        double[] mateix_c = new double[3];
        mateix_a[0] = D4 / ((E4 -E5)*(E4-E6));
        mateix_a[1] = D5 / ((E5 -E4)*(E5-E6));
        mateix_a[2] = D6 / ((E6 -E5)*(E6-E4));

        mateix_b[0] = -mateix_a[0] * (E5 + E6);
        mateix_b[1] = -mateix_a[1] * (E4 + E6);
        mateix_b[2] = -mateix_a[2] * (E4 + E5);
        
        mateix_c[0] = mateix_a[0] * E5 * E6;
        mateix_c[1] = mateix_a[1] * E4 * E6;
        mateix_c[2] = mateix_a[2] * E4 * E5;
        
        double suma = mateix_a[0] + mateix_a[1] + mateix_a[2] ;
        double sumb = mateix_b[0] + mateix_b[1] + mateix_b[2] ;
        double sumc = mateix_c[0] + mateix_c[1] + mateix_c[2] ;
        BigDecimal temp = new BigDecimal(suma * L3*L3 + sumb * L3 + sumc).setScale(2, BigDecimal.ROUND_HALF_UP);
        this.Dwave = temp.doubleValue();
        return res+380;
    }

    private double CountDuv(double u, double v) {
        double Lfp = Math.sqrt((u - 0.292) * (u - 0.292) + (v - 0.24) * (v - 0.24));
        double a = Math.acos((u - 0.292) / Lfp);
        double k6 = -0.00616793;
        double k5 = 0.0893944;
        double k4 = -0.05179722;
        double k3 = 1.5317403;
        double k2 = -2.4243787;
        double k1 = 1.925865;
        double k0 = -0.471106;
        double Lbb = k6 * Math.pow(a, 6.0) + k5 * Math.pow(a, 5.0) + k4 * Math.pow(a, 4.0) + k3 * Math.pow(a, 3.0) + k2 * Math.pow(a, 2.0) + k1 * Math.pow(a, 1.0) + k0;
        double res = Lfp - Lbb;
        return res;
    }

    public double sumByParameterArray(double[] parameterArray, double[] sensorData) {
        //杩愮畻杩囩▼涓殑灏忔暟澶勭悊闂锛氱敱浜庡鐞嗘暟鎹紬澶氾紝灏忔暟鐨勬斂绛栧彲鑳藉緢澶х殑褰卞搷鏁版嵁鐨勭粨鏋�
        double res = 0.0;
        int i = 0;
        while (i < sensorData.length) {
            res = res + sensorData[i] * parameterArray[i++];
        }
        return res;
    }
    public double sumByParameterArray(double[] parameterArray, double[] sensorData,double[] tcs_i) {
        //杩愮畻杩囩▼涓殑灏忔暟澶勭悊闂锛氱敱浜庡鐞嗘暟鎹紬澶氾紝灏忔暟鐨勬斂绛栧彲鑳藉緢澶х殑褰卞搷鏁版嵁鐨勭粨鏋�
        double res = 0.0;
        int i = 0;
        while (i < sensorData.length) {
            res = res + sensorData[i] * parameterArray[i] * tcs_i[i++];
        }
        return res;
    }

    public double[] normalnizeData(double[] sensorData,double[] prameters){
        double[] sum = new double[sensorData.length];
        double[] res = new double[sensorData.length];
        double T = 0;
        for (int i=0;i<sensorData.length;i++){
            sum[i] = sensorData[i] * prameters[i];
            T += sum[i];
        }
        for (int i=0 ; i< res.length;i++){
            res[i] = sensorData[i]/T*100.0;
        }
        return res;
    }

    public double[] normalnizeData1(double[] sensorData,double[] prameters){
        double[] sum = new double[sensorData.length];
        double[] res = new double[sensorData.length];
        double T = 0;
        for (int i=0;i<sensorData.length;i++){
            sum[i] = sensorData[i] * prameters[i];
            T += sum[i];
        }
        for (int i=0 ; i< res.length;i++){
            res[i] = sensorData[i]/T*100.0;
        }
        return res;
    }
    
    public double[] getSensorData() {
        return this.sensorData;
    }

    public double[] getSample_x() {
        return sample_x;
    }

    public double getIlluminance_sum() {
        return illuminance_sum;
    }

    public double getxSum() {
        return xSum;
    }

    public double getySum() {
        return ySum;
    }

    public double getzSum() {
        return zSum;
    }

    public double getXY_y() {
        return XY_y;
    }

    public double getXY_x() {
        return XY_x;
    }

    public double getUV_u_ci() {
        return UV_u_ci;
    }

    public double getUV_v_ci() {
        return UV_v_ci;
    }

    public double getDuv() {
        return Duv;
    }

    public int getPwave() {
        return Pwave;
    }

    public double getDwave() {
        return Dwave;
    }

    public double getDuv_2() {
        return Duv_2;
    }

    public double[] getQi() {
        return Qi;
    }

    public double[] getCRI() {
        return CRI;
    }

}
