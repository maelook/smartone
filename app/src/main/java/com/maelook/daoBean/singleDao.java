package com.maelook.daoBean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.maelook.Bean.single;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SINGLE".
*/
public class singleDao extends AbstractDao<single, String> {

    public static final String TABLENAME = "SINGLE";

    /**
     * Properties of entity single.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Date = new Property(0, String.class, "date", true, "DATE");
        public final static Property Location = new Property(1, String.class, "location", false, "LOCATION");
        public final static Property Filepath = new Property(2, String.class, "filepath", false, "FILEPATH");
        public final static Property Imgpath = new Property(3, String.class, "imgpath", false, "IMGPATH");
        public final static Property Record = new Property(4, String.class, "record", false, "RECORD");
    }


    public singleDao(DaoConfig config) {
        super(config);
    }
    
    public singleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SINGLE\" (" + //
                "\"DATE\" TEXT PRIMARY KEY NOT NULL ," + // 0: date
                "\"LOCATION\" TEXT," + // 1: location
                "\"FILEPATH\" TEXT," + // 2: filepath
                "\"IMGPATH\" TEXT," + // 3: imgpath
                "\"RECORD\" TEXT);"); // 4: record
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SINGLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, single entity) {
        stmt.clearBindings();
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(1, date);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(2, location);
        }
 
        String filepath = entity.getFilepath();
        if (filepath != null) {
            stmt.bindString(3, filepath);
        }
 
        String imgpath = entity.getImgpath();
        if (imgpath != null) {
            stmt.bindString(4, imgpath);
        }
 
        String record = entity.getRecord();
        if (record != null) {
            stmt.bindString(5, record);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, single entity) {
        stmt.clearBindings();
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(1, date);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(2, location);
        }
 
        String filepath = entity.getFilepath();
        if (filepath != null) {
            stmt.bindString(3, filepath);
        }
 
        String imgpath = entity.getImgpath();
        if (imgpath != null) {
            stmt.bindString(4, imgpath);
        }
 
        String record = entity.getRecord();
        if (record != null) {
            stmt.bindString(5, record);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public single readEntity(Cursor cursor, int offset) {
        single entity = new single( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // date
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // location
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // filepath
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // imgpath
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // record
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, single entity, int offset) {
        entity.setDate(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setLocation(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFilepath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setImgpath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRecord(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(single entity, long rowId) {
        return entity.getDate();
    }
    
    @Override
    public String getKey(single entity) {
        if(entity != null) {
            return entity.getDate();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(single entity) {
        return entity.getDate() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
