package com.maelook.daoBean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.maelook.Bean.multipleRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MULTIPLE_RECORD".
*/
public class multipleRecordDao extends AbstractDao<multipleRecord, String> {

    public static final String TABLENAME = "MULTIPLE_RECORD";

    /**
     * Properties of entity multipleRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Date = new Property(0, String.class, "date", true, "DATE");
        public final static Property SingleRecord1 = new Property(1, String.class, "singleRecord1", false, "SINGLE_RECORD1");
        public final static Property SingleRecord2 = new Property(2, String.class, "singleRecord2", false, "SINGLE_RECORD2");
        public final static Property SingleRecord3 = new Property(3, String.class, "singleRecord3", false, "SINGLE_RECORD3");
        public final static Property SingleRecord4 = new Property(4, String.class, "singleRecord4", false, "SINGLE_RECORD4");
        public final static Property SingleRecord5 = new Property(5, String.class, "singleRecord5", false, "SINGLE_RECORD5");
        public final static Property SingleRecord6 = new Property(6, String.class, "singleRecord6", false, "SINGLE_RECORD6");
        public final static Property SingleRecord7 = new Property(7, String.class, "singleRecord7", false, "SINGLE_RECORD7");
        public final static Property SingleRecord8 = new Property(8, String.class, "singleRecord8", false, "SINGLE_RECORD8");
        public final static Property SingleRecord9 = new Property(9, String.class, "singleRecord9", false, "SINGLE_RECORD9");
        public final static Property SingleRecord10 = new Property(10, String.class, "singleRecord10", false, "SINGLE_RECORD10");
    }


    public multipleRecordDao(DaoConfig config) {
        super(config);
    }
    
    public multipleRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MULTIPLE_RECORD\" (" + //
                "\"DATE\" TEXT PRIMARY KEY NOT NULL ," + // 0: date
                "\"SINGLE_RECORD1\" TEXT," + // 1: singleRecord1
                "\"SINGLE_RECORD2\" TEXT," + // 2: singleRecord2
                "\"SINGLE_RECORD3\" TEXT," + // 3: singleRecord3
                "\"SINGLE_RECORD4\" TEXT," + // 4: singleRecord4
                "\"SINGLE_RECORD5\" TEXT," + // 5: singleRecord5
                "\"SINGLE_RECORD6\" TEXT," + // 6: singleRecord6
                "\"SINGLE_RECORD7\" TEXT," + // 7: singleRecord7
                "\"SINGLE_RECORD8\" TEXT," + // 8: singleRecord8
                "\"SINGLE_RECORD9\" TEXT," + // 9: singleRecord9
                "\"SINGLE_RECORD10\" TEXT);"); // 10: singleRecord10
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MULTIPLE_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, multipleRecord entity) {
        stmt.clearBindings();
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(1, date);
        }
 
        String singleRecord1 = entity.getSingleRecord1();
        if (singleRecord1 != null) {
            stmt.bindString(2, singleRecord1);
        }
 
        String singleRecord2 = entity.getSingleRecord2();
        if (singleRecord2 != null) {
            stmt.bindString(3, singleRecord2);
        }
 
        String singleRecord3 = entity.getSingleRecord3();
        if (singleRecord3 != null) {
            stmt.bindString(4, singleRecord3);
        }
 
        String singleRecord4 = entity.getSingleRecord4();
        if (singleRecord4 != null) {
            stmt.bindString(5, singleRecord4);
        }
 
        String singleRecord5 = entity.getSingleRecord5();
        if (singleRecord5 != null) {
            stmt.bindString(6, singleRecord5);
        }
 
        String singleRecord6 = entity.getSingleRecord6();
        if (singleRecord6 != null) {
            stmt.bindString(7, singleRecord6);
        }
 
        String singleRecord7 = entity.getSingleRecord7();
        if (singleRecord7 != null) {
            stmt.bindString(8, singleRecord7);
        }
 
        String singleRecord8 = entity.getSingleRecord8();
        if (singleRecord8 != null) {
            stmt.bindString(9, singleRecord8);
        }
 
        String singleRecord9 = entity.getSingleRecord9();
        if (singleRecord9 != null) {
            stmt.bindString(10, singleRecord9);
        }
 
        String singleRecord10 = entity.getSingleRecord10();
        if (singleRecord10 != null) {
            stmt.bindString(11, singleRecord10);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, multipleRecord entity) {
        stmt.clearBindings();
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(1, date);
        }
 
        String singleRecord1 = entity.getSingleRecord1();
        if (singleRecord1 != null) {
            stmt.bindString(2, singleRecord1);
        }
 
        String singleRecord2 = entity.getSingleRecord2();
        if (singleRecord2 != null) {
            stmt.bindString(3, singleRecord2);
        }
 
        String singleRecord3 = entity.getSingleRecord3();
        if (singleRecord3 != null) {
            stmt.bindString(4, singleRecord3);
        }
 
        String singleRecord4 = entity.getSingleRecord4();
        if (singleRecord4 != null) {
            stmt.bindString(5, singleRecord4);
        }
 
        String singleRecord5 = entity.getSingleRecord5();
        if (singleRecord5 != null) {
            stmt.bindString(6, singleRecord5);
        }
 
        String singleRecord6 = entity.getSingleRecord6();
        if (singleRecord6 != null) {
            stmt.bindString(7, singleRecord6);
        }
 
        String singleRecord7 = entity.getSingleRecord7();
        if (singleRecord7 != null) {
            stmt.bindString(8, singleRecord7);
        }
 
        String singleRecord8 = entity.getSingleRecord8();
        if (singleRecord8 != null) {
            stmt.bindString(9, singleRecord8);
        }
 
        String singleRecord9 = entity.getSingleRecord9();
        if (singleRecord9 != null) {
            stmt.bindString(10, singleRecord9);
        }
 
        String singleRecord10 = entity.getSingleRecord10();
        if (singleRecord10 != null) {
            stmt.bindString(11, singleRecord10);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public multipleRecord readEntity(Cursor cursor, int offset) {
        multipleRecord entity = new multipleRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // date
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // singleRecord1
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // singleRecord2
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // singleRecord3
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // singleRecord4
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // singleRecord5
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // singleRecord6
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // singleRecord7
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // singleRecord8
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // singleRecord9
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // singleRecord10
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, multipleRecord entity, int offset) {
        entity.setDate(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSingleRecord1(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSingleRecord2(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSingleRecord3(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSingleRecord4(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSingleRecord5(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSingleRecord6(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSingleRecord7(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSingleRecord8(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSingleRecord9(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSingleRecord10(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final String updateKeyAfterInsert(multipleRecord entity, long rowId) {
        return entity.getDate();
    }
    
    @Override
    public String getKey(multipleRecord entity) {
        if(entity != null) {
            return entity.getDate();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(multipleRecord entity) {
        return entity.getDate() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
