package com.maelook.daoBean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.maelook.Bean.singleRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SINGLE_RECORD".
*/
public class singleRecordDao extends AbstractDao<singleRecord, Long> {

    public static final String TABLENAME = "SINGLE_RECORD";

    /**
     * Properties of entity singleRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property S = new Property(1, int.class, "s", false, "S");
        public final static Property Lux = new Property(2, int.class, "Lux", false, "LUX");
        public final static Property Cct = new Property(3, int.class, "cct", false, "CCT");
        public final static Property Cri = new Property(4, int.class, "cri", false, "CRI");
        public final static Property X = new Property(5, float.class, "x", false, "X");
        public final static Property Y = new Property(6, float.class, "y", false, "Y");
        public final static Property Uv_u = new Property(7, float.class, "uv_u", false, "UV_U");
        public final static Property Uv_v = new Property(8, float.class, "uv_v", false, "UV_V");
        public final static Property Duv = new Property(9, float.class, "Duv", false, "DUV");
        public final static Property Dwave = new Property(10, int.class, "Dwave", false, "DWAVE");
        public final static Property Pwave = new Property(11, int.class, "Pwave", false, "PWAVE");
        public final static Property ColorRatio = new Property(12, float.class, "colorRatio", false, "COLOR_RATIO");
        public final static Property Rf = new Property(13, int.class, "Rf", false, "RF");
        public final static Property Rg = new Property(14, int.class, "Rg", false, "RG");
        public final static Property V = new Property(15, float.class, "V", false, "V");
        public final static Property Qa = new Property(16, String.class, "Qa", false, "QA");
        public final static Property Gai = new Property(17, int.class, "gai", false, "GAI");
        public final static Property Cqs = new Property(18, String.class, "cqs", false, "CQS");
        public final static Property RColor = new Property(19, int.class, "rColor", false, "R_COLOR");
        public final static Property GColor = new Property(20, int.class, "gColor", false, "G_COLOR");
        public final static Property BColor = new Property(21, int.class, "bColor", false, "B_COLOR");
        public final static Property Date = new Property(22, String.class, "date", false, "DATE");
    }


    public singleRecordDao(DaoConfig config) {
        super(config);
    }
    
    public singleRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SINGLE_RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"S\" INTEGER NOT NULL ," + // 1: s
                "\"LUX\" INTEGER NOT NULL ," + // 2: Lux
                "\"CCT\" INTEGER NOT NULL ," + // 3: cct
                "\"CRI\" INTEGER NOT NULL ," + // 4: cri
                "\"X\" REAL NOT NULL ," + // 5: x
                "\"Y\" REAL NOT NULL ," + // 6: y
                "\"UV_U\" REAL NOT NULL ," + // 7: uv_u
                "\"UV_V\" REAL NOT NULL ," + // 8: uv_v
                "\"DUV\" REAL NOT NULL ," + // 9: Duv
                "\"DWAVE\" INTEGER NOT NULL ," + // 10: Dwave
                "\"PWAVE\" INTEGER NOT NULL ," + // 11: Pwave
                "\"COLOR_RATIO\" REAL NOT NULL ," + // 12: colorRatio
                "\"RF\" INTEGER NOT NULL ," + // 13: Rf
                "\"RG\" INTEGER NOT NULL ," + // 14: Rg
                "\"V\" REAL NOT NULL ," + // 15: V
                "\"QA\" TEXT," + // 16: Qa
                "\"GAI\" INTEGER NOT NULL ," + // 17: gai
                "\"CQS\" TEXT," + // 18: cqs
                "\"R_COLOR\" INTEGER NOT NULL ," + // 19: rColor
                "\"G_COLOR\" INTEGER NOT NULL ," + // 20: gColor
                "\"B_COLOR\" INTEGER NOT NULL ," + // 21: bColor
                "\"DATE\" TEXT);"); // 22: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SINGLE_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, singleRecord entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getS());
        stmt.bindLong(3, entity.getLux());
        stmt.bindLong(4, entity.getCct());
        stmt.bindLong(5, entity.getCri());
        stmt.bindDouble(6, entity.getX());
        stmt.bindDouble(7, entity.getY());
        stmt.bindDouble(8, entity.getUv_u());
        stmt.bindDouble(9, entity.getUv_v());
        stmt.bindDouble(10, entity.getDuv());
        stmt.bindLong(11, entity.getDwave());
        stmt.bindLong(12, entity.getPwave());
        stmt.bindDouble(13, entity.getColorRatio());
        stmt.bindLong(14, entity.getRf());
        stmt.bindLong(15, entity.getRg());
        stmt.bindDouble(16, entity.getV());
 
        String Qa = entity.getQa();
        if (Qa != null) {
            stmt.bindString(17, Qa);
        }
        stmt.bindLong(18, entity.getGai());
 
        String cqs = entity.getCqs();
        if (cqs != null) {
            stmt.bindString(19, cqs);
        }
        stmt.bindLong(20, entity.getRColor());
        stmt.bindLong(21, entity.getGColor());
        stmt.bindLong(22, entity.getBColor());
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(23, date);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, singleRecord entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getS());
        stmt.bindLong(3, entity.getLux());
        stmt.bindLong(4, entity.getCct());
        stmt.bindLong(5, entity.getCri());
        stmt.bindDouble(6, entity.getX());
        stmt.bindDouble(7, entity.getY());
        stmt.bindDouble(8, entity.getUv_u());
        stmt.bindDouble(9, entity.getUv_v());
        stmt.bindDouble(10, entity.getDuv());
        stmt.bindLong(11, entity.getDwave());
        stmt.bindLong(12, entity.getPwave());
        stmt.bindDouble(13, entity.getColorRatio());
        stmt.bindLong(14, entity.getRf());
        stmt.bindLong(15, entity.getRg());
        stmt.bindDouble(16, entity.getV());
 
        String Qa = entity.getQa();
        if (Qa != null) {
            stmt.bindString(17, Qa);
        }
        stmt.bindLong(18, entity.getGai());
 
        String cqs = entity.getCqs();
        if (cqs != null) {
            stmt.bindString(19, cqs);
        }
        stmt.bindLong(20, entity.getRColor());
        stmt.bindLong(21, entity.getGColor());
        stmt.bindLong(22, entity.getBColor());
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(23, date);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public singleRecord readEntity(Cursor cursor, int offset) {
        singleRecord entity = new singleRecord( //
            cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // s
            cursor.getInt(offset + 2), // Lux
            cursor.getInt(offset + 3), // cct
            cursor.getInt(offset + 4), // cri
            cursor.getFloat(offset + 5), // x
            cursor.getFloat(offset + 6), // y
            cursor.getFloat(offset + 7), // uv_u
            cursor.getFloat(offset + 8), // uv_v
            cursor.getFloat(offset + 9), // Duv
            cursor.getInt(offset + 10), // Dwave
            cursor.getInt(offset + 11), // Pwave
            cursor.getFloat(offset + 12), // colorRatio
            cursor.getInt(offset + 13), // Rf
            cursor.getInt(offset + 14), // Rg
            cursor.getFloat(offset + 15), // V
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // Qa
            cursor.getInt(offset + 17), // gai
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // cqs
            cursor.getInt(offset + 19), // rColor
            cursor.getInt(offset + 20), // gColor
            cursor.getInt(offset + 21), // bColor
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22) // date
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, singleRecord entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setS(cursor.getInt(offset + 1));
        entity.setLux(cursor.getInt(offset + 2));
        entity.setCct(cursor.getInt(offset + 3));
        entity.setCri(cursor.getInt(offset + 4));
        entity.setX(cursor.getFloat(offset + 5));
        entity.setY(cursor.getFloat(offset + 6));
        entity.setUv_u(cursor.getFloat(offset + 7));
        entity.setUv_v(cursor.getFloat(offset + 8));
        entity.setDuv(cursor.getFloat(offset + 9));
        entity.setDwave(cursor.getInt(offset + 10));
        entity.setPwave(cursor.getInt(offset + 11));
        entity.setColorRatio(cursor.getFloat(offset + 12));
        entity.setRf(cursor.getInt(offset + 13));
        entity.setRg(cursor.getInt(offset + 14));
        entity.setV(cursor.getFloat(offset + 15));
        entity.setQa(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setGai(cursor.getInt(offset + 17));
        entity.setCqs(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setRColor(cursor.getInt(offset + 19));
        entity.setGColor(cursor.getInt(offset + 20));
        entity.setBColor(cursor.getInt(offset + 21));
        entity.setDate(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(singleRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(singleRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(singleRecord entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
